
LiveDemo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003550  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003748  08003748  00013748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037d0  080037d0  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  080037d0  080037d0  000137d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037d8  080037d8  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080037d8  080037d8  000137d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037e0  080037e0  000137e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080037e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  20000024  08003808  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08003808  00020260  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee40  00000000  00000000  00020052  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c1f  00000000  00000000  0002ee92  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e58  00000000  00000000  00031ab8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cf0  00000000  00000000  00032910  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029903  00000000  00000000  00033600  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d39a  00000000  00000000  0005cf03  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f4519  00000000  00000000  0006a29d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015e7b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038c0  00000000  00000000  0015e834  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000024 	.word	0x20000024
 8000214:	00000000 	.word	0x00000000
 8000218:	08003730 	.word	0x08003730

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000028 	.word	0x20000028
 8000234:	08003730 	.word	0x08003730

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 fb9b 	bl	8000c78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f000 f806 	bl	8000554 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000548:	f002 fd64 	bl	8003014 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800054c:	2300      	movs	r3, #0
}
 800054e:	4618      	mov	r0, r3
 8000550:	bd80      	pop	{r7, pc}
	...

08000554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800055c:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <HAL_InitTick+0x54>)
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <HAL_InitTick+0x58>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	4619      	mov	r1, r3
 8000566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056a:	fbb3 f3f1 	udiv	r3, r3, r1
 800056e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f000 fbb5 	bl	8000ce2 <HAL_SYSTICK_Config>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800057e:	2301      	movs	r3, #1
 8000580:	e00e      	b.n	80005a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2b0f      	cmp	r3, #15
 8000586:	d80a      	bhi.n	800059e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000588:	2200      	movs	r2, #0
 800058a:	6879      	ldr	r1, [r7, #4]
 800058c:	f04f 30ff 	mov.w	r0, #4294967295
 8000590:	f000 fb7d 	bl	8000c8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000594:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <HAL_InitTick+0x5c>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800059a:	2300      	movs	r3, #0
 800059c:	e000      	b.n	80005a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800059e:	2301      	movs	r3, #1
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000020 	.word	0x20000020
 80005ac:	20000004 	.word	0x20000004
 80005b0:	20000000 	.word	0x20000000

080005b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <HAL_IncTick+0x20>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	461a      	mov	r2, r3
 80005be:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <HAL_IncTick+0x24>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4413      	add	r3, r2
 80005c4:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <HAL_IncTick+0x24>)
 80005c6:	6013      	str	r3, [r2, #0]
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20000004 	.word	0x20000004
 80005d8:	200000c4 	.word	0x200000c4

080005dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  return uwTick;
 80005e0:	4b03      	ldr	r3, [pc, #12]	; (80005f0 <HAL_GetTick+0x14>)
 80005e2:	681b      	ldr	r3, [r3, #0]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	200000c4 	.word	0x200000c4

080005f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80005fc:	2300      	movs	r3, #0
 80005fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d101      	bne.n	800060a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000606:	2301      	movs	r3, #1
 8000608:	e031      	b.n	800066e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060e:	2b00      	cmp	r3, #0
 8000610:	d109      	bne.n	8000626 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	f002 f89e 	bl	8002754 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2200      	movs	r2, #0
 800061c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2200      	movs	r2, #0
 8000622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062a:	f003 0310 	and.w	r3, r3, #16
 800062e:	2b00      	cmp	r3, #0
 8000630:	d116      	bne.n	8000660 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000636:	4b10      	ldr	r3, [pc, #64]	; (8000678 <HAL_ADC_Init+0x84>)
 8000638:	4013      	ands	r3, r2
 800063a:	f043 0202 	orr.w	r2, r3, #2
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	f000 f94e 	bl	80008e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2200      	movs	r2, #0
 800064c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000652:	f023 0303 	bic.w	r3, r3, #3
 8000656:	f043 0201 	orr.w	r2, r3, #1
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	641a      	str	r2, [r3, #64]	; 0x40
 800065e:	e001      	b.n	8000664 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000660:	2301      	movs	r3, #1
 8000662:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2200      	movs	r2, #0
 8000668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800066c:	7bfb      	ldrb	r3, [r7, #15]
}
 800066e:	4618      	mov	r0, r3
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	ffffeefd 	.word	0xffffeefd

0800067c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000690:	2b01      	cmp	r3, #1
 8000692:	d101      	bne.n	8000698 <HAL_ADC_ConfigChannel+0x1c>
 8000694:	2302      	movs	r3, #2
 8000696:	e115      	b.n	80008c4 <HAL_ADC_ConfigChannel+0x248>
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2201      	movs	r2, #1
 800069c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2b09      	cmp	r3, #9
 80006a6:	d935      	bls.n	8000714 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	68d9      	ldr	r1, [r3, #12]
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	b29b      	uxth	r3, r3
 80006b4:	461a      	mov	r2, r3
 80006b6:	4613      	mov	r3, r2
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	4413      	add	r3, r2
 80006bc:	3b1e      	subs	r3, #30
 80006be:	2207      	movs	r2, #7
 80006c0:	fa02 f303 	lsl.w	r3, r2, r3
 80006c4:	43da      	mvns	r2, r3
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	400a      	ands	r2, r1
 80006cc:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a7f      	ldr	r2, [pc, #508]	; (80008d0 <HAL_ADC_ConfigChannel+0x254>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d10a      	bne.n	80006ee <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	68d9      	ldr	r1, [r3, #12]
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	689b      	ldr	r3, [r3, #8]
 80006e2:	061a      	lsls	r2, r3, #24
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	430a      	orrs	r2, r1
 80006ea:	60da      	str	r2, [r3, #12]
 80006ec:	e035      	b.n	800075a <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	68d9      	ldr	r1, [r3, #12]
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	689a      	ldr	r2, [r3, #8]
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	4618      	mov	r0, r3
 8000700:	4603      	mov	r3, r0
 8000702:	005b      	lsls	r3, r3, #1
 8000704:	4403      	add	r3, r0
 8000706:	3b1e      	subs	r3, #30
 8000708:	409a      	lsls	r2, r3
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	430a      	orrs	r2, r1
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	e022      	b.n	800075a <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	6919      	ldr	r1, [r3, #16]
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	b29b      	uxth	r3, r3
 8000720:	461a      	mov	r2, r3
 8000722:	4613      	mov	r3, r2
 8000724:	005b      	lsls	r3, r3, #1
 8000726:	4413      	add	r3, r2
 8000728:	2207      	movs	r2, #7
 800072a:	fa02 f303 	lsl.w	r3, r2, r3
 800072e:	43da      	mvns	r2, r3
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	400a      	ands	r2, r1
 8000736:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	6919      	ldr	r1, [r3, #16]
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	689a      	ldr	r2, [r3, #8]
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	b29b      	uxth	r3, r3
 8000748:	4618      	mov	r0, r3
 800074a:	4603      	mov	r3, r0
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	4403      	add	r3, r0
 8000750:	409a      	lsls	r2, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	430a      	orrs	r2, r1
 8000758:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	685b      	ldr	r3, [r3, #4]
 800075e:	2b06      	cmp	r3, #6
 8000760:	d824      	bhi.n	80007ac <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	685a      	ldr	r2, [r3, #4]
 800076c:	4613      	mov	r3, r2
 800076e:	009b      	lsls	r3, r3, #2
 8000770:	4413      	add	r3, r2
 8000772:	3b05      	subs	r3, #5
 8000774:	221f      	movs	r2, #31
 8000776:	fa02 f303 	lsl.w	r3, r2, r3
 800077a:	43da      	mvns	r2, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	400a      	ands	r2, r1
 8000782:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	b29b      	uxth	r3, r3
 8000790:	4618      	mov	r0, r3
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	685a      	ldr	r2, [r3, #4]
 8000796:	4613      	mov	r3, r2
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	4413      	add	r3, r2
 800079c:	3b05      	subs	r3, #5
 800079e:	fa00 f203 	lsl.w	r2, r0, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	430a      	orrs	r2, r1
 80007a8:	635a      	str	r2, [r3, #52]	; 0x34
 80007aa:	e04c      	b.n	8000846 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	2b0c      	cmp	r3, #12
 80007b2:	d824      	bhi.n	80007fe <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	685a      	ldr	r2, [r3, #4]
 80007be:	4613      	mov	r3, r2
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	4413      	add	r3, r2
 80007c4:	3b23      	subs	r3, #35	; 0x23
 80007c6:	221f      	movs	r2, #31
 80007c8:	fa02 f303 	lsl.w	r3, r2, r3
 80007cc:	43da      	mvns	r2, r3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	400a      	ands	r2, r1
 80007d4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	4618      	mov	r0, r3
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	685a      	ldr	r2, [r3, #4]
 80007e8:	4613      	mov	r3, r2
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	4413      	add	r3, r2
 80007ee:	3b23      	subs	r3, #35	; 0x23
 80007f0:	fa00 f203 	lsl.w	r2, r0, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	430a      	orrs	r2, r1
 80007fa:	631a      	str	r2, [r3, #48]	; 0x30
 80007fc:	e023      	b.n	8000846 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	685a      	ldr	r2, [r3, #4]
 8000808:	4613      	mov	r3, r2
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	4413      	add	r3, r2
 800080e:	3b41      	subs	r3, #65	; 0x41
 8000810:	221f      	movs	r2, #31
 8000812:	fa02 f303 	lsl.w	r3, r2, r3
 8000816:	43da      	mvns	r2, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	400a      	ands	r2, r1
 800081e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	b29b      	uxth	r3, r3
 800082c:	4618      	mov	r0, r3
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	685a      	ldr	r2, [r3, #4]
 8000832:	4613      	mov	r3, r2
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	4413      	add	r3, r2
 8000838:	3b41      	subs	r3, #65	; 0x41
 800083a:	fa00 f203 	lsl.w	r2, r0, r3
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	430a      	orrs	r2, r1
 8000844:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a22      	ldr	r2, [pc, #136]	; (80008d4 <HAL_ADC_ConfigChannel+0x258>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d109      	bne.n	8000864 <HAL_ADC_ConfigChannel+0x1e8>
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	2b12      	cmp	r3, #18
 8000856:	d105      	bne.n	8000864 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8000858:	4b1f      	ldr	r3, [pc, #124]	; (80008d8 <HAL_ADC_ConfigChannel+0x25c>)
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	4a1e      	ldr	r2, [pc, #120]	; (80008d8 <HAL_ADC_ConfigChannel+0x25c>)
 800085e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000862:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a1a      	ldr	r2, [pc, #104]	; (80008d4 <HAL_ADC_ConfigChannel+0x258>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d125      	bne.n	80008ba <HAL_ADC_ConfigChannel+0x23e>
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a17      	ldr	r2, [pc, #92]	; (80008d0 <HAL_ADC_ConfigChannel+0x254>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d003      	beq.n	8000880 <HAL_ADC_ConfigChannel+0x204>
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2b11      	cmp	r3, #17
 800087e:	d11c      	bne.n	80008ba <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8000880:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <HAL_ADC_ConfigChannel+0x25c>)
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	4a14      	ldr	r2, [pc, #80]	; (80008d8 <HAL_ADC_ConfigChannel+0x25c>)
 8000886:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800088a:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a0f      	ldr	r2, [pc, #60]	; (80008d0 <HAL_ADC_ConfigChannel+0x254>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d111      	bne.n	80008ba <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <HAL_ADC_ConfigChannel+0x260>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a11      	ldr	r2, [pc, #68]	; (80008e0 <HAL_ADC_ConfigChannel+0x264>)
 800089c:	fba2 2303 	umull	r2, r3, r2, r3
 80008a0:	0c9a      	lsrs	r2, r3, #18
 80008a2:	4613      	mov	r3, r2
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	4413      	add	r3, r2
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80008ac:	e002      	b.n	80008b4 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	3b01      	subs	r3, #1
 80008b2:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d1f9      	bne.n	80008ae <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2200      	movs	r2, #0
 80008be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80008c2:	2300      	movs	r3, #0
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3714      	adds	r7, #20
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr
 80008d0:	10000012 	.word	0x10000012
 80008d4:	40012000 	.word	0x40012000
 80008d8:	40012300 	.word	0x40012300
 80008dc:	20000020 	.word	0x20000020
 80008e0:	431bde83 	.word	0x431bde83

080008e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80008ec:	4b78      	ldr	r3, [pc, #480]	; (8000ad0 <ADC_Init+0x1ec>)
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	4a77      	ldr	r2, [pc, #476]	; (8000ad0 <ADC_Init+0x1ec>)
 80008f2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80008f6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80008f8:	4b75      	ldr	r3, [pc, #468]	; (8000ad0 <ADC_Init+0x1ec>)
 80008fa:	685a      	ldr	r2, [r3, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	4973      	ldr	r1, [pc, #460]	; (8000ad0 <ADC_Init+0x1ec>)
 8000902:	4313      	orrs	r3, r2
 8000904:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	685a      	ldr	r2, [r3, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000914:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	6859      	ldr	r1, [r3, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	691b      	ldr	r3, [r3, #16]
 8000920:	021a      	lsls	r2, r3, #8
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	430a      	orrs	r2, r1
 8000928:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	685a      	ldr	r2, [r3, #4]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000938:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	6859      	ldr	r1, [r3, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	689a      	ldr	r2, [r3, #8]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	430a      	orrs	r2, r1
 800094a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	689a      	ldr	r2, [r3, #8]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800095a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	6899      	ldr	r1, [r3, #8]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	68da      	ldr	r2, [r3, #12]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	430a      	orrs	r2, r1
 800096c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000972:	4a58      	ldr	r2, [pc, #352]	; (8000ad4 <ADC_Init+0x1f0>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d022      	beq.n	80009be <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	689a      	ldr	r2, [r3, #8]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000986:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	6899      	ldr	r1, [r3, #8]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	430a      	orrs	r2, r1
 8000998:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	689a      	ldr	r2, [r3, #8]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80009a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	6899      	ldr	r1, [r3, #8]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	430a      	orrs	r2, r1
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	e00f      	b.n	80009de <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	689a      	ldr	r2, [r3, #8]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80009cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	689a      	ldr	r2, [r3, #8]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80009dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	689a      	ldr	r2, [r3, #8]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f022 0202 	bic.w	r2, r2, #2
 80009ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	6899      	ldr	r1, [r3, #8]
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	005a      	lsls	r2, r3, #1
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	430a      	orrs	r2, r1
 8000a00:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d01b      	beq.n	8000a44 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	685a      	ldr	r2, [r3, #4]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000a1a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	685a      	ldr	r2, [r3, #4]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000a2a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	6859      	ldr	r1, [r3, #4]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a36:	3b01      	subs	r3, #1
 8000a38:	035a      	lsls	r2, r3, #13
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	430a      	orrs	r2, r1
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	e007      	b.n	8000a54 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	685a      	ldr	r2, [r3, #4]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000a52:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000a62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	69db      	ldr	r3, [r3, #28]
 8000a6e:	3b01      	subs	r3, #1
 8000a70:	051a      	lsls	r2, r3, #20
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	430a      	orrs	r2, r1
 8000a78:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	689a      	ldr	r2, [r3, #8]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000a88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	6899      	ldr	r1, [r3, #8]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000a96:	025a      	lsls	r2, r3, #9
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	430a      	orrs	r2, r1
 8000a9e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	689a      	ldr	r2, [r3, #8]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000aae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	6899      	ldr	r1, [r3, #8]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	695b      	ldr	r3, [r3, #20]
 8000aba:	029a      	lsls	r2, r3, #10
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	430a      	orrs	r2, r1
 8000ac2:	609a      	str	r2, [r3, #8]
}
 8000ac4:	bf00      	nop
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	40012300 	.word	0x40012300
 8000ad4:	0f000001 	.word	0x0f000001

08000ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	f003 0307 	and.w	r3, r3, #7
 8000ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae8:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <__NVIC_SetPriorityGrouping+0x40>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aee:	68ba      	ldr	r2, [r7, #8]
 8000af0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000af4:	4013      	ands	r3, r2
 8000af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <__NVIC_SetPriorityGrouping+0x44>)
 8000b02:	4313      	orrs	r3, r2
 8000b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b06:	4a04      	ldr	r2, [pc, #16]	; (8000b18 <__NVIC_SetPriorityGrouping+0x40>)
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	60d3      	str	r3, [r2, #12]
}
 8000b0c:	bf00      	nop
 8000b0e:	3714      	adds	r7, #20
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	e000ed00 	.word	0xe000ed00
 8000b1c:	05fa0000 	.word	0x05fa0000

08000b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b24:	4b04      	ldr	r3, [pc, #16]	; (8000b38 <__NVIC_GetPriorityGrouping+0x18>)
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	0a1b      	lsrs	r3, r3, #8
 8000b2a:	f003 0307 	and.w	r3, r3, #7
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	db0b      	blt.n	8000b66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	f003 021f 	and.w	r2, r3, #31
 8000b54:	4907      	ldr	r1, [pc, #28]	; (8000b74 <__NVIC_EnableIRQ+0x38>)
 8000b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5a:	095b      	lsrs	r3, r3, #5
 8000b5c:	2001      	movs	r0, #1
 8000b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b66:	bf00      	nop
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000e100 	.word	0xe000e100

08000b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	6039      	str	r1, [r7, #0]
 8000b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	db0a      	blt.n	8000ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	490c      	ldr	r1, [pc, #48]	; (8000bc4 <__NVIC_SetPriority+0x4c>)
 8000b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b96:	0112      	lsls	r2, r2, #4
 8000b98:	b2d2      	uxtb	r2, r2
 8000b9a:	440b      	add	r3, r1
 8000b9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba0:	e00a      	b.n	8000bb8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	4908      	ldr	r1, [pc, #32]	; (8000bc8 <__NVIC_SetPriority+0x50>)
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	f003 030f 	and.w	r3, r3, #15
 8000bae:	3b04      	subs	r3, #4
 8000bb0:	0112      	lsls	r2, r2, #4
 8000bb2:	b2d2      	uxtb	r2, r2
 8000bb4:	440b      	add	r3, r1
 8000bb6:	761a      	strb	r2, [r3, #24]
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	e000e100 	.word	0xe000e100
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b089      	sub	sp, #36	; 0x24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	f003 0307 	and.w	r3, r3, #7
 8000bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	f1c3 0307 	rsb	r3, r3, #7
 8000be6:	2b04      	cmp	r3, #4
 8000be8:	bf28      	it	cs
 8000bea:	2304      	movcs	r3, #4
 8000bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	3304      	adds	r3, #4
 8000bf2:	2b06      	cmp	r3, #6
 8000bf4:	d902      	bls.n	8000bfc <NVIC_EncodePriority+0x30>
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3b03      	subs	r3, #3
 8000bfa:	e000      	b.n	8000bfe <NVIC_EncodePriority+0x32>
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c00:	f04f 32ff 	mov.w	r2, #4294967295
 8000c04:	69bb      	ldr	r3, [r7, #24]
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	43da      	mvns	r2, r3
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	401a      	ands	r2, r3
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c14:	f04f 31ff 	mov.w	r1, #4294967295
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1e:	43d9      	mvns	r1, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c24:	4313      	orrs	r3, r2
         );
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3724      	adds	r7, #36	; 0x24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
	...

08000c34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c44:	d301      	bcc.n	8000c4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c46:	2301      	movs	r3, #1
 8000c48:	e00f      	b.n	8000c6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c4a:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <SysTick_Config+0x40>)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c52:	210f      	movs	r1, #15
 8000c54:	f04f 30ff 	mov.w	r0, #4294967295
 8000c58:	f7ff ff8e 	bl	8000b78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c5c:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <SysTick_Config+0x40>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c62:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <SysTick_Config+0x40>)
 8000c64:	2207      	movs	r2, #7
 8000c66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	e000e010 	.word	0xe000e010

08000c78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f7ff ff29 	bl	8000ad8 <__NVIC_SetPriorityGrouping>
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b086      	sub	sp, #24
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	4603      	mov	r3, r0
 8000c96:	60b9      	str	r1, [r7, #8]
 8000c98:	607a      	str	r2, [r7, #4]
 8000c9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ca0:	f7ff ff3e 	bl	8000b20 <__NVIC_GetPriorityGrouping>
 8000ca4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	68b9      	ldr	r1, [r7, #8]
 8000caa:	6978      	ldr	r0, [r7, #20]
 8000cac:	f7ff ff8e 	bl	8000bcc <NVIC_EncodePriority>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cb6:	4611      	mov	r1, r2
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff ff5d 	bl	8000b78 <__NVIC_SetPriority>
}
 8000cbe:	bf00      	nop
 8000cc0:	3718      	adds	r7, #24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b082      	sub	sp, #8
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	4603      	mov	r3, r0
 8000cce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff ff31 	bl	8000b3c <__NVIC_EnableIRQ>
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f7ff ffa2 	bl	8000c34 <SysTick_Config>
 8000cf0:	4603      	mov	r3, r0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
	...

08000cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b089      	sub	sp, #36	; 0x24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
 8000d1a:	e175      	b.n	8001008 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	697a      	ldr	r2, [r7, #20]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	f040 8164 	bne.w	8001002 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d003      	beq.n	8000d4a <HAL_GPIO_Init+0x4e>
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	2b12      	cmp	r3, #18
 8000d48:	d123      	bne.n	8000d92 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	08da      	lsrs	r2, r3, #3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	3208      	adds	r2, #8
 8000d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	220f      	movs	r2, #15
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43db      	mvns	r3, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	691a      	ldr	r2, [r3, #16]
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	f003 0307 	and.w	r3, r3, #7
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	08da      	lsrs	r2, r3, #3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3208      	adds	r2, #8
 8000d8c:	69b9      	ldr	r1, [r7, #24]
 8000d8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	2203      	movs	r2, #3
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43db      	mvns	r3, r3
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	4013      	ands	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f003 0203 	and.w	r2, r3, #3
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d00b      	beq.n	8000de6 <HAL_GPIO_Init+0xea>
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	2b02      	cmp	r3, #2
 8000dd4:	d007      	beq.n	8000de6 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dda:	2b11      	cmp	r3, #17
 8000ddc:	d003      	beq.n	8000de6 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	2b12      	cmp	r3, #18
 8000de4:	d130      	bne.n	8000e48 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	2203      	movs	r2, #3
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	43db      	mvns	r3, r3
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	68da      	ldr	r2, [r3, #12]
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	43db      	mvns	r3, r3
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	091b      	lsrs	r3, r3, #4
 8000e32:	f003 0201 	and.w	r2, r3, #1
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	2203      	movs	r2, #3
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	689a      	ldr	r2, [r3, #8]
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	f000 80be 	beq.w	8001002 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e86:	4b65      	ldr	r3, [pc, #404]	; (800101c <HAL_GPIO_Init+0x320>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8a:	4a64      	ldr	r2, [pc, #400]	; (800101c <HAL_GPIO_Init+0x320>)
 8000e8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e90:	6453      	str	r3, [r2, #68]	; 0x44
 8000e92:	4b62      	ldr	r3, [pc, #392]	; (800101c <HAL_GPIO_Init+0x320>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000e9e:	4a60      	ldr	r2, [pc, #384]	; (8001020 <HAL_GPIO_Init+0x324>)
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	089b      	lsrs	r3, r3, #2
 8000ea4:	3302      	adds	r3, #2
 8000ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	f003 0303 	and.w	r3, r3, #3
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	220f      	movs	r2, #15
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a57      	ldr	r2, [pc, #348]	; (8001024 <HAL_GPIO_Init+0x328>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d037      	beq.n	8000f3a <HAL_GPIO_Init+0x23e>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a56      	ldr	r2, [pc, #344]	; (8001028 <HAL_GPIO_Init+0x32c>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d031      	beq.n	8000f36 <HAL_GPIO_Init+0x23a>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a55      	ldr	r2, [pc, #340]	; (800102c <HAL_GPIO_Init+0x330>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d02b      	beq.n	8000f32 <HAL_GPIO_Init+0x236>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a54      	ldr	r2, [pc, #336]	; (8001030 <HAL_GPIO_Init+0x334>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d025      	beq.n	8000f2e <HAL_GPIO_Init+0x232>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a53      	ldr	r2, [pc, #332]	; (8001034 <HAL_GPIO_Init+0x338>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d01f      	beq.n	8000f2a <HAL_GPIO_Init+0x22e>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a52      	ldr	r2, [pc, #328]	; (8001038 <HAL_GPIO_Init+0x33c>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d019      	beq.n	8000f26 <HAL_GPIO_Init+0x22a>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a51      	ldr	r2, [pc, #324]	; (800103c <HAL_GPIO_Init+0x340>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d013      	beq.n	8000f22 <HAL_GPIO_Init+0x226>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a50      	ldr	r2, [pc, #320]	; (8001040 <HAL_GPIO_Init+0x344>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d00d      	beq.n	8000f1e <HAL_GPIO_Init+0x222>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a4f      	ldr	r2, [pc, #316]	; (8001044 <HAL_GPIO_Init+0x348>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d007      	beq.n	8000f1a <HAL_GPIO_Init+0x21e>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a4e      	ldr	r2, [pc, #312]	; (8001048 <HAL_GPIO_Init+0x34c>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d101      	bne.n	8000f16 <HAL_GPIO_Init+0x21a>
 8000f12:	2309      	movs	r3, #9
 8000f14:	e012      	b.n	8000f3c <HAL_GPIO_Init+0x240>
 8000f16:	230a      	movs	r3, #10
 8000f18:	e010      	b.n	8000f3c <HAL_GPIO_Init+0x240>
 8000f1a:	2308      	movs	r3, #8
 8000f1c:	e00e      	b.n	8000f3c <HAL_GPIO_Init+0x240>
 8000f1e:	2307      	movs	r3, #7
 8000f20:	e00c      	b.n	8000f3c <HAL_GPIO_Init+0x240>
 8000f22:	2306      	movs	r3, #6
 8000f24:	e00a      	b.n	8000f3c <HAL_GPIO_Init+0x240>
 8000f26:	2305      	movs	r3, #5
 8000f28:	e008      	b.n	8000f3c <HAL_GPIO_Init+0x240>
 8000f2a:	2304      	movs	r3, #4
 8000f2c:	e006      	b.n	8000f3c <HAL_GPIO_Init+0x240>
 8000f2e:	2303      	movs	r3, #3
 8000f30:	e004      	b.n	8000f3c <HAL_GPIO_Init+0x240>
 8000f32:	2302      	movs	r3, #2
 8000f34:	e002      	b.n	8000f3c <HAL_GPIO_Init+0x240>
 8000f36:	2301      	movs	r3, #1
 8000f38:	e000      	b.n	8000f3c <HAL_GPIO_Init+0x240>
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	69fa      	ldr	r2, [r7, #28]
 8000f3e:	f002 0203 	and.w	r2, r2, #3
 8000f42:	0092      	lsls	r2, r2, #2
 8000f44:	4093      	lsls	r3, r2
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f4c:	4934      	ldr	r1, [pc, #208]	; (8001020 <HAL_GPIO_Init+0x324>)
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	089b      	lsrs	r3, r3, #2
 8000f52:	3302      	adds	r3, #2
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f5a:	4b3c      	ldr	r3, [pc, #240]	; (800104c <HAL_GPIO_Init+0x350>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	43db      	mvns	r3, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4013      	ands	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d003      	beq.n	8000f7e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f7e:	4a33      	ldr	r2, [pc, #204]	; (800104c <HAL_GPIO_Init+0x350>)
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f84:	4b31      	ldr	r3, [pc, #196]	; (800104c <HAL_GPIO_Init+0x350>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4013      	ands	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d003      	beq.n	8000fa8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fa8:	4a28      	ldr	r2, [pc, #160]	; (800104c <HAL_GPIO_Init+0x350>)
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fae:	4b27      	ldr	r3, [pc, #156]	; (800104c <HAL_GPIO_Init+0x350>)
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d003      	beq.n	8000fd2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fd2:	4a1e      	ldr	r2, [pc, #120]	; (800104c <HAL_GPIO_Init+0x350>)
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fd8:	4b1c      	ldr	r3, [pc, #112]	; (800104c <HAL_GPIO_Init+0x350>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d003      	beq.n	8000ffc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ffc:	4a13      	ldr	r2, [pc, #76]	; (800104c <HAL_GPIO_Init+0x350>)
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3301      	adds	r3, #1
 8001006:	61fb      	str	r3, [r7, #28]
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	2b0f      	cmp	r3, #15
 800100c:	f67f ae86 	bls.w	8000d1c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001010:	bf00      	nop
 8001012:	3724      	adds	r7, #36	; 0x24
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	40023800 	.word	0x40023800
 8001020:	40013800 	.word	0x40013800
 8001024:	40020000 	.word	0x40020000
 8001028:	40020400 	.word	0x40020400
 800102c:	40020800 	.word	0x40020800
 8001030:	40020c00 	.word	0x40020c00
 8001034:	40021000 	.word	0x40021000
 8001038:	40021400 	.word	0x40021400
 800103c:	40021800 	.word	0x40021800
 8001040:	40021c00 	.word	0x40021c00
 8001044:	40022000 	.word	0x40022000
 8001048:	40022400 	.word	0x40022400
 800104c:	40013c00 	.word	0x40013c00

08001050 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	460b      	mov	r3, r1
 800105a:	807b      	strh	r3, [r7, #2]
 800105c:	4613      	mov	r3, r2
 800105e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001060:	787b      	ldrb	r3, [r7, #1]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d003      	beq.n	800106e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001066:	887a      	ldrh	r2, [r7, #2]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800106c:	e003      	b.n	8001076 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800106e:	887b      	ldrh	r3, [r7, #2]
 8001070:	041a      	lsls	r2, r3, #16
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	619a      	str	r2, [r3, #24]
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
	...

08001084 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800108e:	4b23      	ldr	r3, [pc, #140]	; (800111c <HAL_PWREx_EnableOverDrive+0x98>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	4a22      	ldr	r2, [pc, #136]	; (800111c <HAL_PWREx_EnableOverDrive+0x98>)
 8001094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001098:	6413      	str	r3, [r2, #64]	; 0x40
 800109a:	4b20      	ldr	r3, [pc, #128]	; (800111c <HAL_PWREx_EnableOverDrive+0x98>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a2:	603b      	str	r3, [r7, #0]
 80010a4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80010a6:	4b1e      	ldr	r3, [pc, #120]	; (8001120 <HAL_PWREx_EnableOverDrive+0x9c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a1d      	ldr	r2, [pc, #116]	; (8001120 <HAL_PWREx_EnableOverDrive+0x9c>)
 80010ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010b0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010b2:	f7ff fa93 	bl	80005dc <HAL_GetTick>
 80010b6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80010b8:	e009      	b.n	80010ce <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80010ba:	f7ff fa8f 	bl	80005dc <HAL_GetTick>
 80010be:	4602      	mov	r2, r0
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010c8:	d901      	bls.n	80010ce <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80010ca:	2303      	movs	r3, #3
 80010cc:	e022      	b.n	8001114 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80010ce:	4b14      	ldr	r3, [pc, #80]	; (8001120 <HAL_PWREx_EnableOverDrive+0x9c>)
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010da:	d1ee      	bne.n	80010ba <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80010dc:	4b10      	ldr	r3, [pc, #64]	; (8001120 <HAL_PWREx_EnableOverDrive+0x9c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a0f      	ldr	r2, [pc, #60]	; (8001120 <HAL_PWREx_EnableOverDrive+0x9c>)
 80010e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010e8:	f7ff fa78 	bl	80005dc <HAL_GetTick>
 80010ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80010ee:	e009      	b.n	8001104 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80010f0:	f7ff fa74 	bl	80005dc <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010fe:	d901      	bls.n	8001104 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001100:	2303      	movs	r3, #3
 8001102:	e007      	b.n	8001114 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001110:	d1ee      	bne.n	80010f0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001112:	2300      	movs	r3, #0
}
 8001114:	4618      	mov	r0, r3
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40023800 	.word	0x40023800
 8001120:	40007000 	.word	0x40007000

08001124 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 800112c:	2300      	movs	r3, #0
 800112e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d101      	bne.n	800113a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e25e      	b.n	80015f8 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	2b00      	cmp	r3, #0
 8001144:	f000 8087 	beq.w	8001256 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001148:	4b96      	ldr	r3, [pc, #600]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	f003 030c 	and.w	r3, r3, #12
 8001150:	2b04      	cmp	r3, #4
 8001152:	d00c      	beq.n	800116e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001154:	4b93      	ldr	r3, [pc, #588]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	f003 030c 	and.w	r3, r3, #12
 800115c:	2b08      	cmp	r3, #8
 800115e:	d112      	bne.n	8001186 <HAL_RCC_OscConfig+0x62>
 8001160:	4b90      	ldr	r3, [pc, #576]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001168:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800116c:	d10b      	bne.n	8001186 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800116e:	4b8d      	ldr	r3, [pc, #564]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d06c      	beq.n	8001254 <HAL_RCC_OscConfig+0x130>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d168      	bne.n	8001254 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e238      	b.n	80015f8 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800118e:	d106      	bne.n	800119e <HAL_RCC_OscConfig+0x7a>
 8001190:	4b84      	ldr	r3, [pc, #528]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a83      	ldr	r2, [pc, #524]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 8001196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800119a:	6013      	str	r3, [r2, #0]
 800119c:	e02e      	b.n	80011fc <HAL_RCC_OscConfig+0xd8>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d10c      	bne.n	80011c0 <HAL_RCC_OscConfig+0x9c>
 80011a6:	4b7f      	ldr	r3, [pc, #508]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a7e      	ldr	r2, [pc, #504]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 80011ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011b0:	6013      	str	r3, [r2, #0]
 80011b2:	4b7c      	ldr	r3, [pc, #496]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a7b      	ldr	r2, [pc, #492]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 80011b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011bc:	6013      	str	r3, [r2, #0]
 80011be:	e01d      	b.n	80011fc <HAL_RCC_OscConfig+0xd8>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011c8:	d10c      	bne.n	80011e4 <HAL_RCC_OscConfig+0xc0>
 80011ca:	4b76      	ldr	r3, [pc, #472]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a75      	ldr	r2, [pc, #468]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 80011d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011d4:	6013      	str	r3, [r2, #0]
 80011d6:	4b73      	ldr	r3, [pc, #460]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a72      	ldr	r2, [pc, #456]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 80011dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	e00b      	b.n	80011fc <HAL_RCC_OscConfig+0xd8>
 80011e4:	4b6f      	ldr	r3, [pc, #444]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a6e      	ldr	r2, [pc, #440]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 80011ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ee:	6013      	str	r3, [r2, #0]
 80011f0:	4b6c      	ldr	r3, [pc, #432]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a6b      	ldr	r2, [pc, #428]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 80011f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d013      	beq.n	800122c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001204:	f7ff f9ea 	bl	80005dc <HAL_GetTick>
 8001208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800120a:	e008      	b.n	800121e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800120c:	f7ff f9e6 	bl	80005dc <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b64      	cmp	r3, #100	; 0x64
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e1ec      	b.n	80015f8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800121e:	4b61      	ldr	r3, [pc, #388]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d0f0      	beq.n	800120c <HAL_RCC_OscConfig+0xe8>
 800122a:	e014      	b.n	8001256 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800122c:	f7ff f9d6 	bl	80005dc <HAL_GetTick>
 8001230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001234:	f7ff f9d2 	bl	80005dc <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b64      	cmp	r3, #100	; 0x64
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e1d8      	b.n	80015f8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001246:	4b57      	ldr	r3, [pc, #348]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1f0      	bne.n	8001234 <HAL_RCC_OscConfig+0x110>
 8001252:	e000      	b.n	8001256 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001254:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d069      	beq.n	8001336 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001262:	4b50      	ldr	r3, [pc, #320]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 030c 	and.w	r3, r3, #12
 800126a:	2b00      	cmp	r3, #0
 800126c:	d00b      	beq.n	8001286 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800126e:	4b4d      	ldr	r3, [pc, #308]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 030c 	and.w	r3, r3, #12
 8001276:	2b08      	cmp	r3, #8
 8001278:	d11c      	bne.n	80012b4 <HAL_RCC_OscConfig+0x190>
 800127a:	4b4a      	ldr	r3, [pc, #296]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d116      	bne.n	80012b4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001286:	4b47      	ldr	r3, [pc, #284]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d005      	beq.n	800129e <HAL_RCC_OscConfig+0x17a>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d001      	beq.n	800129e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e1ac      	b.n	80015f8 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800129e:	4b41      	ldr	r3, [pc, #260]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	493d      	ldr	r1, [pc, #244]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 80012ae:	4313      	orrs	r3, r2
 80012b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012b2:	e040      	b.n	8001336 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d023      	beq.n	8001304 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012bc:	4b39      	ldr	r3, [pc, #228]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a38      	ldr	r2, [pc, #224]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c8:	f7ff f988 	bl	80005dc <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012d0:	f7ff f984 	bl	80005dc <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e18a      	b.n	80015f8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e2:	4b30      	ldr	r3, [pc, #192]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0f0      	beq.n	80012d0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ee:	4b2d      	ldr	r3, [pc, #180]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	691b      	ldr	r3, [r3, #16]
 80012fa:	00db      	lsls	r3, r3, #3
 80012fc:	4929      	ldr	r1, [pc, #164]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 80012fe:	4313      	orrs	r3, r2
 8001300:	600b      	str	r3, [r1, #0]
 8001302:	e018      	b.n	8001336 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001304:	4b27      	ldr	r3, [pc, #156]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a26      	ldr	r2, [pc, #152]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 800130a:	f023 0301 	bic.w	r3, r3, #1
 800130e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001310:	f7ff f964 	bl	80005dc <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001318:	f7ff f960 	bl	80005dc <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e166      	b.n	80015f8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800132a:	4b1e      	ldr	r3, [pc, #120]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1f0      	bne.n	8001318 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0308 	and.w	r3, r3, #8
 800133e:	2b00      	cmp	r3, #0
 8001340:	d038      	beq.n	80013b4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d019      	beq.n	800137e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800134a:	4b16      	ldr	r3, [pc, #88]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 800134c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800134e:	4a15      	ldr	r2, [pc, #84]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001356:	f7ff f941 	bl	80005dc <HAL_GetTick>
 800135a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800135c:	e008      	b.n	8001370 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800135e:	f7ff f93d 	bl	80005dc <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	2b02      	cmp	r3, #2
 800136a:	d901      	bls.n	8001370 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	e143      	b.n	80015f8 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001370:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 8001372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d0f0      	beq.n	800135e <HAL_RCC_OscConfig+0x23a>
 800137c:	e01a      	b.n	80013b4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 8001380:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001382:	4a08      	ldr	r2, [pc, #32]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 8001384:	f023 0301 	bic.w	r3, r3, #1
 8001388:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800138a:	f7ff f927 	bl	80005dc <HAL_GetTick>
 800138e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001390:	e00a      	b.n	80013a8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001392:	f7ff f923 	bl	80005dc <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b02      	cmp	r3, #2
 800139e:	d903      	bls.n	80013a8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e129      	b.n	80015f8 <HAL_RCC_OscConfig+0x4d4>
 80013a4:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013a8:	4b95      	ldr	r3, [pc, #596]	; (8001600 <HAL_RCC_OscConfig+0x4dc>)
 80013aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d1ee      	bne.n	8001392 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0304 	and.w	r3, r3, #4
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f000 80a4 	beq.w	800150a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013c2:	4b8f      	ldr	r3, [pc, #572]	; (8001600 <HAL_RCC_OscConfig+0x4dc>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d10d      	bne.n	80013ea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ce:	4b8c      	ldr	r3, [pc, #560]	; (8001600 <HAL_RCC_OscConfig+0x4dc>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	4a8b      	ldr	r2, [pc, #556]	; (8001600 <HAL_RCC_OscConfig+0x4dc>)
 80013d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d8:	6413      	str	r3, [r2, #64]	; 0x40
 80013da:	4b89      	ldr	r3, [pc, #548]	; (8001600 <HAL_RCC_OscConfig+0x4dc>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80013e6:	2301      	movs	r3, #1
 80013e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013ea:	4b86      	ldr	r3, [pc, #536]	; (8001604 <HAL_RCC_OscConfig+0x4e0>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d118      	bne.n	8001428 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80013f6:	4b83      	ldr	r3, [pc, #524]	; (8001604 <HAL_RCC_OscConfig+0x4e0>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a82      	ldr	r2, [pc, #520]	; (8001604 <HAL_RCC_OscConfig+0x4e0>)
 80013fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001400:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001402:	f7ff f8eb 	bl	80005dc <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001408:	e008      	b.n	800141c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800140a:	f7ff f8e7 	bl	80005dc <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b64      	cmp	r3, #100	; 0x64
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e0ed      	b.n	80015f8 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800141c:	4b79      	ldr	r3, [pc, #484]	; (8001604 <HAL_RCC_OscConfig+0x4e0>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001424:	2b00      	cmp	r3, #0
 8001426:	d0f0      	beq.n	800140a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d106      	bne.n	800143e <HAL_RCC_OscConfig+0x31a>
 8001430:	4b73      	ldr	r3, [pc, #460]	; (8001600 <HAL_RCC_OscConfig+0x4dc>)
 8001432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001434:	4a72      	ldr	r2, [pc, #456]	; (8001600 <HAL_RCC_OscConfig+0x4dc>)
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	6713      	str	r3, [r2, #112]	; 0x70
 800143c:	e02d      	b.n	800149a <HAL_RCC_OscConfig+0x376>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10c      	bne.n	8001460 <HAL_RCC_OscConfig+0x33c>
 8001446:	4b6e      	ldr	r3, [pc, #440]	; (8001600 <HAL_RCC_OscConfig+0x4dc>)
 8001448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800144a:	4a6d      	ldr	r2, [pc, #436]	; (8001600 <HAL_RCC_OscConfig+0x4dc>)
 800144c:	f023 0301 	bic.w	r3, r3, #1
 8001450:	6713      	str	r3, [r2, #112]	; 0x70
 8001452:	4b6b      	ldr	r3, [pc, #428]	; (8001600 <HAL_RCC_OscConfig+0x4dc>)
 8001454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001456:	4a6a      	ldr	r2, [pc, #424]	; (8001600 <HAL_RCC_OscConfig+0x4dc>)
 8001458:	f023 0304 	bic.w	r3, r3, #4
 800145c:	6713      	str	r3, [r2, #112]	; 0x70
 800145e:	e01c      	b.n	800149a <HAL_RCC_OscConfig+0x376>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	2b05      	cmp	r3, #5
 8001466:	d10c      	bne.n	8001482 <HAL_RCC_OscConfig+0x35e>
 8001468:	4b65      	ldr	r3, [pc, #404]	; (8001600 <HAL_RCC_OscConfig+0x4dc>)
 800146a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800146c:	4a64      	ldr	r2, [pc, #400]	; (8001600 <HAL_RCC_OscConfig+0x4dc>)
 800146e:	f043 0304 	orr.w	r3, r3, #4
 8001472:	6713      	str	r3, [r2, #112]	; 0x70
 8001474:	4b62      	ldr	r3, [pc, #392]	; (8001600 <HAL_RCC_OscConfig+0x4dc>)
 8001476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001478:	4a61      	ldr	r2, [pc, #388]	; (8001600 <HAL_RCC_OscConfig+0x4dc>)
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	6713      	str	r3, [r2, #112]	; 0x70
 8001480:	e00b      	b.n	800149a <HAL_RCC_OscConfig+0x376>
 8001482:	4b5f      	ldr	r3, [pc, #380]	; (8001600 <HAL_RCC_OscConfig+0x4dc>)
 8001484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001486:	4a5e      	ldr	r2, [pc, #376]	; (8001600 <HAL_RCC_OscConfig+0x4dc>)
 8001488:	f023 0301 	bic.w	r3, r3, #1
 800148c:	6713      	str	r3, [r2, #112]	; 0x70
 800148e:	4b5c      	ldr	r3, [pc, #368]	; (8001600 <HAL_RCC_OscConfig+0x4dc>)
 8001490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001492:	4a5b      	ldr	r2, [pc, #364]	; (8001600 <HAL_RCC_OscConfig+0x4dc>)
 8001494:	f023 0304 	bic.w	r3, r3, #4
 8001498:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d015      	beq.n	80014ce <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014a2:	f7ff f89b 	bl	80005dc <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a8:	e00a      	b.n	80014c0 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014aa:	f7ff f897 	bl	80005dc <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e09b      	b.n	80015f8 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014c0:	4b4f      	ldr	r3, [pc, #316]	; (8001600 <HAL_RCC_OscConfig+0x4dc>)
 80014c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d0ee      	beq.n	80014aa <HAL_RCC_OscConfig+0x386>
 80014cc:	e014      	b.n	80014f8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ce:	f7ff f885 	bl	80005dc <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014d4:	e00a      	b.n	80014ec <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014d6:	f7ff f881 	bl	80005dc <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e085      	b.n	80015f8 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ec:	4b44      	ldr	r3, [pc, #272]	; (8001600 <HAL_RCC_OscConfig+0x4dc>)
 80014ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1ee      	bne.n	80014d6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014f8:	7dfb      	ldrb	r3, [r7, #23]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d105      	bne.n	800150a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014fe:	4b40      	ldr	r3, [pc, #256]	; (8001600 <HAL_RCC_OscConfig+0x4dc>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	4a3f      	ldr	r2, [pc, #252]	; (8001600 <HAL_RCC_OscConfig+0x4dc>)
 8001504:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001508:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d071      	beq.n	80015f6 <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001512:	4b3b      	ldr	r3, [pc, #236]	; (8001600 <HAL_RCC_OscConfig+0x4dc>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f003 030c 	and.w	r3, r3, #12
 800151a:	2b08      	cmp	r3, #8
 800151c:	d069      	beq.n	80015f2 <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	2b02      	cmp	r3, #2
 8001524:	d14b      	bne.n	80015be <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001526:	4b36      	ldr	r3, [pc, #216]	; (8001600 <HAL_RCC_OscConfig+0x4dc>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a35      	ldr	r2, [pc, #212]	; (8001600 <HAL_RCC_OscConfig+0x4dc>)
 800152c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001530:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001532:	f7ff f853 	bl	80005dc <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800153a:	f7ff f84f 	bl	80005dc <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e055      	b.n	80015f8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800154c:	4b2c      	ldr	r3, [pc, #176]	; (8001600 <HAL_RCC_OscConfig+0x4dc>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1f0      	bne.n	800153a <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	69da      	ldr	r2, [r3, #28]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a1b      	ldr	r3, [r3, #32]
 8001560:	431a      	orrs	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001566:	019b      	lsls	r3, r3, #6
 8001568:	431a      	orrs	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156e:	085b      	lsrs	r3, r3, #1
 8001570:	3b01      	subs	r3, #1
 8001572:	041b      	lsls	r3, r3, #16
 8001574:	431a      	orrs	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157a:	061b      	lsls	r3, r3, #24
 800157c:	431a      	orrs	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	071b      	lsls	r3, r3, #28
 8001584:	491e      	ldr	r1, [pc, #120]	; (8001600 <HAL_RCC_OscConfig+0x4dc>)
 8001586:	4313      	orrs	r3, r2
 8001588:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800158a:	4b1d      	ldr	r3, [pc, #116]	; (8001600 <HAL_RCC_OscConfig+0x4dc>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a1c      	ldr	r2, [pc, #112]	; (8001600 <HAL_RCC_OscConfig+0x4dc>)
 8001590:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001594:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001596:	f7ff f821 	bl	80005dc <HAL_GetTick>
 800159a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800159e:	f7ff f81d 	bl	80005dc <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e023      	b.n	80015f8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015b0:	4b13      	ldr	r3, [pc, #76]	; (8001600 <HAL_RCC_OscConfig+0x4dc>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0f0      	beq.n	800159e <HAL_RCC_OscConfig+0x47a>
 80015bc:	e01b      	b.n	80015f6 <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015be:	4b10      	ldr	r3, [pc, #64]	; (8001600 <HAL_RCC_OscConfig+0x4dc>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a0f      	ldr	r2, [pc, #60]	; (8001600 <HAL_RCC_OscConfig+0x4dc>)
 80015c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ca:	f7ff f807 	bl	80005dc <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015d0:	e008      	b.n	80015e4 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015d2:	f7ff f803 	bl	80005dc <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e009      	b.n	80015f8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_RCC_OscConfig+0x4dc>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1f0      	bne.n	80015d2 <HAL_RCC_OscConfig+0x4ae>
 80015f0:	e001      	b.n	80015f6 <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e000      	b.n	80015f8 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40023800 	.word	0x40023800
 8001604:	40007000 	.word	0x40007000

08001608 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d101      	bne.n	8001620 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e0ce      	b.n	80017be <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001620:	4b69      	ldr	r3, [pc, #420]	; (80017c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 030f 	and.w	r3, r3, #15
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	429a      	cmp	r2, r3
 800162c:	d910      	bls.n	8001650 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800162e:	4b66      	ldr	r3, [pc, #408]	; (80017c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f023 020f 	bic.w	r2, r3, #15
 8001636:	4964      	ldr	r1, [pc, #400]	; (80017c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	4313      	orrs	r3, r2
 800163c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800163e:	4b62      	ldr	r3, [pc, #392]	; (80017c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 030f 	and.w	r3, r3, #15
 8001646:	683a      	ldr	r2, [r7, #0]
 8001648:	429a      	cmp	r2, r3
 800164a:	d001      	beq.n	8001650 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e0b6      	b.n	80017be <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d020      	beq.n	800169e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	2b00      	cmp	r3, #0
 8001666:	d005      	beq.n	8001674 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001668:	4b58      	ldr	r3, [pc, #352]	; (80017cc <HAL_RCC_ClockConfig+0x1c4>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	4a57      	ldr	r2, [pc, #348]	; (80017cc <HAL_RCC_ClockConfig+0x1c4>)
 800166e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001672:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0308 	and.w	r3, r3, #8
 800167c:	2b00      	cmp	r3, #0
 800167e:	d005      	beq.n	800168c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001680:	4b52      	ldr	r3, [pc, #328]	; (80017cc <HAL_RCC_ClockConfig+0x1c4>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	4a51      	ldr	r2, [pc, #324]	; (80017cc <HAL_RCC_ClockConfig+0x1c4>)
 8001686:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800168a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800168c:	4b4f      	ldr	r3, [pc, #316]	; (80017cc <HAL_RCC_ClockConfig+0x1c4>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	494c      	ldr	r1, [pc, #304]	; (80017cc <HAL_RCC_ClockConfig+0x1c4>)
 800169a:	4313      	orrs	r3, r2
 800169c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d040      	beq.n	800172c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d107      	bne.n	80016c2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b2:	4b46      	ldr	r3, [pc, #280]	; (80017cc <HAL_RCC_ClockConfig+0x1c4>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d115      	bne.n	80016ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e07d      	b.n	80017be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d107      	bne.n	80016da <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ca:	4b40      	ldr	r3, [pc, #256]	; (80017cc <HAL_RCC_ClockConfig+0x1c4>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d109      	bne.n	80016ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e071      	b.n	80017be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016da:	4b3c      	ldr	r3, [pc, #240]	; (80017cc <HAL_RCC_ClockConfig+0x1c4>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d101      	bne.n	80016ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e069      	b.n	80017be <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016ea:	4b38      	ldr	r3, [pc, #224]	; (80017cc <HAL_RCC_ClockConfig+0x1c4>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f023 0203 	bic.w	r2, r3, #3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	4935      	ldr	r1, [pc, #212]	; (80017cc <HAL_RCC_ClockConfig+0x1c4>)
 80016f8:	4313      	orrs	r3, r2
 80016fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016fc:	f7fe ff6e 	bl	80005dc <HAL_GetTick>
 8001700:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001702:	e00a      	b.n	800171a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001704:	f7fe ff6a 	bl	80005dc <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001712:	4293      	cmp	r3, r2
 8001714:	d901      	bls.n	800171a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e051      	b.n	80017be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800171a:	4b2c      	ldr	r3, [pc, #176]	; (80017cc <HAL_RCC_ClockConfig+0x1c4>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f003 020c 	and.w	r2, r3, #12
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	429a      	cmp	r2, r3
 800172a:	d1eb      	bne.n	8001704 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800172c:	4b26      	ldr	r3, [pc, #152]	; (80017c8 <HAL_RCC_ClockConfig+0x1c0>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 030f 	and.w	r3, r3, #15
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	429a      	cmp	r2, r3
 8001738:	d210      	bcs.n	800175c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800173a:	4b23      	ldr	r3, [pc, #140]	; (80017c8 <HAL_RCC_ClockConfig+0x1c0>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f023 020f 	bic.w	r2, r3, #15
 8001742:	4921      	ldr	r1, [pc, #132]	; (80017c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	4313      	orrs	r3, r2
 8001748:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800174a:	4b1f      	ldr	r3, [pc, #124]	; (80017c8 <HAL_RCC_ClockConfig+0x1c0>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	429a      	cmp	r2, r3
 8001756:	d001      	beq.n	800175c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e030      	b.n	80017be <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0304 	and.w	r3, r3, #4
 8001764:	2b00      	cmp	r3, #0
 8001766:	d008      	beq.n	800177a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001768:	4b18      	ldr	r3, [pc, #96]	; (80017cc <HAL_RCC_ClockConfig+0x1c4>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	4915      	ldr	r1, [pc, #84]	; (80017cc <HAL_RCC_ClockConfig+0x1c4>)
 8001776:	4313      	orrs	r3, r2
 8001778:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0308 	and.w	r3, r3, #8
 8001782:	2b00      	cmp	r3, #0
 8001784:	d009      	beq.n	800179a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001786:	4b11      	ldr	r3, [pc, #68]	; (80017cc <HAL_RCC_ClockConfig+0x1c4>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	490d      	ldr	r1, [pc, #52]	; (80017cc <HAL_RCC_ClockConfig+0x1c4>)
 8001796:	4313      	orrs	r3, r2
 8001798:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800179a:	f000 f81d 	bl	80017d8 <HAL_RCC_GetSysClockFreq>
 800179e:	4601      	mov	r1, r0
 80017a0:	4b0a      	ldr	r3, [pc, #40]	; (80017cc <HAL_RCC_ClockConfig+0x1c4>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	091b      	lsrs	r3, r3, #4
 80017a6:	f003 030f 	and.w	r3, r3, #15
 80017aa:	4a09      	ldr	r2, [pc, #36]	; (80017d0 <HAL_RCC_ClockConfig+0x1c8>)
 80017ac:	5cd3      	ldrb	r3, [r2, r3]
 80017ae:	fa21 f303 	lsr.w	r3, r1, r3
 80017b2:	4a08      	ldr	r2, [pc, #32]	; (80017d4 <HAL_RCC_ClockConfig+0x1cc>)
 80017b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80017b6:	2000      	movs	r0, #0
 80017b8:	f7fe fecc 	bl	8000554 <HAL_InitTick>

  return HAL_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40023c00 	.word	0x40023c00
 80017cc:	40023800 	.word	0x40023800
 80017d0:	080037c0 	.word	0x080037c0
 80017d4:	20000020 	.word	0x20000020

080017d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80017de:	2300      	movs	r3, #0
 80017e0:	607b      	str	r3, [r7, #4]
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	2300      	movs	r3, #0
 80017e8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017ee:	4b63      	ldr	r3, [pc, #396]	; (800197c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 030c 	and.w	r3, r3, #12
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	d007      	beq.n	800180a <HAL_RCC_GetSysClockFreq+0x32>
 80017fa:	2b08      	cmp	r3, #8
 80017fc:	d008      	beq.n	8001810 <HAL_RCC_GetSysClockFreq+0x38>
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f040 80b4 	bne.w	800196c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001804:	4b5e      	ldr	r3, [pc, #376]	; (8001980 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001806:	60bb      	str	r3, [r7, #8]
       break;
 8001808:	e0b3      	b.n	8001972 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800180a:	4b5e      	ldr	r3, [pc, #376]	; (8001984 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800180c:	60bb      	str	r3, [r7, #8]
      break;
 800180e:	e0b0      	b.n	8001972 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001810:	4b5a      	ldr	r3, [pc, #360]	; (800197c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001818:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800181a:	4b58      	ldr	r3, [pc, #352]	; (800197c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d04a      	beq.n	80018bc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001826:	4b55      	ldr	r3, [pc, #340]	; (800197c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	099b      	lsrs	r3, r3, #6
 800182c:	f04f 0400 	mov.w	r4, #0
 8001830:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001834:	f04f 0200 	mov.w	r2, #0
 8001838:	ea03 0501 	and.w	r5, r3, r1
 800183c:	ea04 0602 	and.w	r6, r4, r2
 8001840:	4629      	mov	r1, r5
 8001842:	4632      	mov	r2, r6
 8001844:	f04f 0300 	mov.w	r3, #0
 8001848:	f04f 0400 	mov.w	r4, #0
 800184c:	0154      	lsls	r4, r2, #5
 800184e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001852:	014b      	lsls	r3, r1, #5
 8001854:	4619      	mov	r1, r3
 8001856:	4622      	mov	r2, r4
 8001858:	1b49      	subs	r1, r1, r5
 800185a:	eb62 0206 	sbc.w	r2, r2, r6
 800185e:	f04f 0300 	mov.w	r3, #0
 8001862:	f04f 0400 	mov.w	r4, #0
 8001866:	0194      	lsls	r4, r2, #6
 8001868:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800186c:	018b      	lsls	r3, r1, #6
 800186e:	1a5b      	subs	r3, r3, r1
 8001870:	eb64 0402 	sbc.w	r4, r4, r2
 8001874:	f04f 0100 	mov.w	r1, #0
 8001878:	f04f 0200 	mov.w	r2, #0
 800187c:	00e2      	lsls	r2, r4, #3
 800187e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001882:	00d9      	lsls	r1, r3, #3
 8001884:	460b      	mov	r3, r1
 8001886:	4614      	mov	r4, r2
 8001888:	195b      	adds	r3, r3, r5
 800188a:	eb44 0406 	adc.w	r4, r4, r6
 800188e:	f04f 0100 	mov.w	r1, #0
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	0262      	lsls	r2, r4, #9
 8001898:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800189c:	0259      	lsls	r1, r3, #9
 800189e:	460b      	mov	r3, r1
 80018a0:	4614      	mov	r4, r2
 80018a2:	4618      	mov	r0, r3
 80018a4:	4621      	mov	r1, r4
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f04f 0400 	mov.w	r4, #0
 80018ac:	461a      	mov	r2, r3
 80018ae:	4623      	mov	r3, r4
 80018b0:	f7fe fcc2 	bl	8000238 <__aeabi_uldivmod>
 80018b4:	4603      	mov	r3, r0
 80018b6:	460c      	mov	r4, r1
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	e049      	b.n	8001950 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018bc:	4b2f      	ldr	r3, [pc, #188]	; (800197c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	099b      	lsrs	r3, r3, #6
 80018c2:	f04f 0400 	mov.w	r4, #0
 80018c6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018ca:	f04f 0200 	mov.w	r2, #0
 80018ce:	ea03 0501 	and.w	r5, r3, r1
 80018d2:	ea04 0602 	and.w	r6, r4, r2
 80018d6:	4629      	mov	r1, r5
 80018d8:	4632      	mov	r2, r6
 80018da:	f04f 0300 	mov.w	r3, #0
 80018de:	f04f 0400 	mov.w	r4, #0
 80018e2:	0154      	lsls	r4, r2, #5
 80018e4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018e8:	014b      	lsls	r3, r1, #5
 80018ea:	4619      	mov	r1, r3
 80018ec:	4622      	mov	r2, r4
 80018ee:	1b49      	subs	r1, r1, r5
 80018f0:	eb62 0206 	sbc.w	r2, r2, r6
 80018f4:	f04f 0300 	mov.w	r3, #0
 80018f8:	f04f 0400 	mov.w	r4, #0
 80018fc:	0194      	lsls	r4, r2, #6
 80018fe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001902:	018b      	lsls	r3, r1, #6
 8001904:	1a5b      	subs	r3, r3, r1
 8001906:	eb64 0402 	sbc.w	r4, r4, r2
 800190a:	f04f 0100 	mov.w	r1, #0
 800190e:	f04f 0200 	mov.w	r2, #0
 8001912:	00e2      	lsls	r2, r4, #3
 8001914:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001918:	00d9      	lsls	r1, r3, #3
 800191a:	460b      	mov	r3, r1
 800191c:	4614      	mov	r4, r2
 800191e:	195b      	adds	r3, r3, r5
 8001920:	eb44 0406 	adc.w	r4, r4, r6
 8001924:	f04f 0100 	mov.w	r1, #0
 8001928:	f04f 0200 	mov.w	r2, #0
 800192c:	02a2      	lsls	r2, r4, #10
 800192e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001932:	0299      	lsls	r1, r3, #10
 8001934:	460b      	mov	r3, r1
 8001936:	4614      	mov	r4, r2
 8001938:	4618      	mov	r0, r3
 800193a:	4621      	mov	r1, r4
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f04f 0400 	mov.w	r4, #0
 8001942:	461a      	mov	r2, r3
 8001944:	4623      	mov	r3, r4
 8001946:	f7fe fc77 	bl	8000238 <__aeabi_uldivmod>
 800194a:	4603      	mov	r3, r0
 800194c:	460c      	mov	r4, r1
 800194e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8001950:	4b0a      	ldr	r3, [pc, #40]	; (800197c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	0c1b      	lsrs	r3, r3, #16
 8001956:	f003 0303 	and.w	r3, r3, #3
 800195a:	3301      	adds	r3, #1
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001960:	68fa      	ldr	r2, [r7, #12]
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	fbb2 f3f3 	udiv	r3, r2, r3
 8001968:	60bb      	str	r3, [r7, #8]
      break;
 800196a:	e002      	b.n	8001972 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800196c:	4b04      	ldr	r3, [pc, #16]	; (8001980 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800196e:	60bb      	str	r3, [r7, #8]
      break;
 8001970:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001972:	68bb      	ldr	r3, [r7, #8]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800197c:	40023800 	.word	0x40023800
 8001980:	00f42400 	.word	0x00f42400
 8001984:	007a1200 	.word	0x007a1200

08001988 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d101      	bne.n	800199a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e01d      	b.n	80019d6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d106      	bne.n	80019b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f001 fcc6 	bl	8003340 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2202      	movs	r2, #2
 80019b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3304      	adds	r3, #4
 80019c4:	4619      	mov	r1, r3
 80019c6:	4610      	mov	r0, r2
 80019c8:	f000 fa60 	bl	8001e8c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	68da      	ldr	r2, [r3, #12]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f042 0201 	orr.w	r2, r2, #1
 80019f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <HAL_TIM_Base_Start_IT+0x50>)
 8001a00:	4013      	ands	r3, r2
 8001a02:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2b06      	cmp	r3, #6
 8001a08:	d00b      	beq.n	8001a22 <HAL_TIM_Base_Start_IT+0x42>
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a10:	d007      	beq.n	8001a22 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f042 0201 	orr.w	r2, r2, #1
 8001a20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	00010007 	.word	0x00010007

08001a34 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68da      	ldr	r2, [r3, #12]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f022 0201 	bic.w	r2, r2, #1
 8001a4a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6a1a      	ldr	r2, [r3, #32]
 8001a52:	f241 1311 	movw	r3, #4369	; 0x1111
 8001a56:	4013      	ands	r3, r2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d10f      	bne.n	8001a7c <HAL_TIM_Base_Stop_IT+0x48>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6a1a      	ldr	r2, [r3, #32]
 8001a62:	f240 4344 	movw	r3, #1092	; 0x444
 8001a66:	4013      	ands	r3, r2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d107      	bne.n	8001a7c <HAL_TIM_Base_Stop_IT+0x48>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f022 0201 	bic.w	r2, r2, #1
 8001a7a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b082      	sub	sp, #8
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d122      	bne.n	8001ae6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d11b      	bne.n	8001ae6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f06f 0202 	mvn.w	r2, #2
 8001ab6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	f003 0303 	and.w	r3, r3, #3
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f000 f9bf 	bl	8001e50 <HAL_TIM_IC_CaptureCallback>
 8001ad2:	e005      	b.n	8001ae0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f000 f9b1 	bl	8001e3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 f9c2 	bl	8001e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	f003 0304 	and.w	r3, r3, #4
 8001af0:	2b04      	cmp	r3, #4
 8001af2:	d122      	bne.n	8001b3a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	f003 0304 	and.w	r3, r3, #4
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	d11b      	bne.n	8001b3a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f06f 0204 	mvn.w	r2, #4
 8001b0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2202      	movs	r2, #2
 8001b10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d003      	beq.n	8001b28 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 f995 	bl	8001e50 <HAL_TIM_IC_CaptureCallback>
 8001b26:	e005      	b.n	8001b34 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f000 f987 	bl	8001e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f000 f998 	bl	8001e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	691b      	ldr	r3, [r3, #16]
 8001b40:	f003 0308 	and.w	r3, r3, #8
 8001b44:	2b08      	cmp	r3, #8
 8001b46:	d122      	bne.n	8001b8e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	f003 0308 	and.w	r3, r3, #8
 8001b52:	2b08      	cmp	r3, #8
 8001b54:	d11b      	bne.n	8001b8e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f06f 0208 	mvn.w	r2, #8
 8001b5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2204      	movs	r2, #4
 8001b64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	69db      	ldr	r3, [r3, #28]
 8001b6c:	f003 0303 	and.w	r3, r3, #3
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d003      	beq.n	8001b7c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f000 f96b 	bl	8001e50 <HAL_TIM_IC_CaptureCallback>
 8001b7a:	e005      	b.n	8001b88 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 f95d 	bl	8001e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f000 f96e 	bl	8001e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	f003 0310 	and.w	r3, r3, #16
 8001b98:	2b10      	cmp	r3, #16
 8001b9a:	d122      	bne.n	8001be2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	f003 0310 	and.w	r3, r3, #16
 8001ba6:	2b10      	cmp	r3, #16
 8001ba8:	d11b      	bne.n	8001be2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f06f 0210 	mvn.w	r2, #16
 8001bb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2208      	movs	r2, #8
 8001bb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	69db      	ldr	r3, [r3, #28]
 8001bc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d003      	beq.n	8001bd0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 f941 	bl	8001e50 <HAL_TIM_IC_CaptureCallback>
 8001bce:	e005      	b.n	8001bdc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f000 f933 	bl	8001e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 f944 	bl	8001e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d10e      	bne.n	8001c0e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d107      	bne.n	8001c0e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f06f 0201 	mvn.w	r2, #1
 8001c06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f001 fd17 	bl	800363c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c18:	2b80      	cmp	r3, #128	; 0x80
 8001c1a:	d10e      	bne.n	8001c3a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c26:	2b80      	cmp	r3, #128	; 0x80
 8001c28:	d107      	bne.n	8001c3a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f000 fac9 	bl	80021cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c48:	d10e      	bne.n	8001c68 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c54:	2b80      	cmp	r3, #128	; 0x80
 8001c56:	d107      	bne.n	8001c68 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 fabc 	bl	80021e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c72:	2b40      	cmp	r3, #64	; 0x40
 8001c74:	d10e      	bne.n	8001c94 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c80:	2b40      	cmp	r3, #64	; 0x40
 8001c82:	d107      	bne.n	8001c94 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 f8f2 	bl	8001e78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	f003 0320 	and.w	r3, r3, #32
 8001c9e:	2b20      	cmp	r3, #32
 8001ca0:	d10e      	bne.n	8001cc0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	f003 0320 	and.w	r3, r3, #32
 8001cac:	2b20      	cmp	r3, #32
 8001cae:	d107      	bne.n	8001cc0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f06f 0220 	mvn.w	r2, #32
 8001cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 fa7c 	bl	80021b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001cc0:	bf00      	nop
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d101      	bne.n	8001ce0 <HAL_TIM_ConfigClockSource+0x18>
 8001cdc:	2302      	movs	r3, #2
 8001cde:	e0a6      	b.n	8001e2e <HAL_TIM_ConfigClockSource+0x166>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2202      	movs	r2, #2
 8001cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	4b4f      	ldr	r3, [pc, #316]	; (8001e38 <HAL_TIM_ConfigClockSource+0x170>)
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d06:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2b40      	cmp	r3, #64	; 0x40
 8001d16:	d067      	beq.n	8001de8 <HAL_TIM_ConfigClockSource+0x120>
 8001d18:	2b40      	cmp	r3, #64	; 0x40
 8001d1a:	d80b      	bhi.n	8001d34 <HAL_TIM_ConfigClockSource+0x6c>
 8001d1c:	2b10      	cmp	r3, #16
 8001d1e:	d073      	beq.n	8001e08 <HAL_TIM_ConfigClockSource+0x140>
 8001d20:	2b10      	cmp	r3, #16
 8001d22:	d802      	bhi.n	8001d2a <HAL_TIM_ConfigClockSource+0x62>
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d06f      	beq.n	8001e08 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001d28:	e078      	b.n	8001e1c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001d2a:	2b20      	cmp	r3, #32
 8001d2c:	d06c      	beq.n	8001e08 <HAL_TIM_ConfigClockSource+0x140>
 8001d2e:	2b30      	cmp	r3, #48	; 0x30
 8001d30:	d06a      	beq.n	8001e08 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001d32:	e073      	b.n	8001e1c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001d34:	2b70      	cmp	r3, #112	; 0x70
 8001d36:	d00d      	beq.n	8001d54 <HAL_TIM_ConfigClockSource+0x8c>
 8001d38:	2b70      	cmp	r3, #112	; 0x70
 8001d3a:	d804      	bhi.n	8001d46 <HAL_TIM_ConfigClockSource+0x7e>
 8001d3c:	2b50      	cmp	r3, #80	; 0x50
 8001d3e:	d033      	beq.n	8001da8 <HAL_TIM_ConfigClockSource+0xe0>
 8001d40:	2b60      	cmp	r3, #96	; 0x60
 8001d42:	d041      	beq.n	8001dc8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001d44:	e06a      	b.n	8001e1c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001d46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d4a:	d066      	beq.n	8001e1a <HAL_TIM_ConfigClockSource+0x152>
 8001d4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d50:	d017      	beq.n	8001d82 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001d52:	e063      	b.n	8001e1c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6818      	ldr	r0, [r3, #0]
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	6899      	ldr	r1, [r3, #8]
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685a      	ldr	r2, [r3, #4]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	f000 f9ac 	bl	80020c0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001d76:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	609a      	str	r2, [r3, #8]
      break;
 8001d80:	e04c      	b.n	8001e1c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6818      	ldr	r0, [r3, #0]
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	6899      	ldr	r1, [r3, #8]
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685a      	ldr	r2, [r3, #4]
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	f000 f995 	bl	80020c0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001da4:	609a      	str	r2, [r3, #8]
      break;
 8001da6:	e039      	b.n	8001e1c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6818      	ldr	r0, [r3, #0]
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	6859      	ldr	r1, [r3, #4]
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	461a      	mov	r2, r3
 8001db6:	f000 f909 	bl	8001fcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2150      	movs	r1, #80	; 0x50
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f000 f962 	bl	800208a <TIM_ITRx_SetConfig>
      break;
 8001dc6:	e029      	b.n	8001e1c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6818      	ldr	r0, [r3, #0]
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	6859      	ldr	r1, [r3, #4]
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	f000 f928 	bl	800202a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2160      	movs	r1, #96	; 0x60
 8001de0:	4618      	mov	r0, r3
 8001de2:	f000 f952 	bl	800208a <TIM_ITRx_SetConfig>
      break;
 8001de6:	e019      	b.n	8001e1c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6818      	ldr	r0, [r3, #0]
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	6859      	ldr	r1, [r3, #4]
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	461a      	mov	r2, r3
 8001df6:	f000 f8e9 	bl	8001fcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2140      	movs	r1, #64	; 0x40
 8001e00:	4618      	mov	r0, r3
 8001e02:	f000 f942 	bl	800208a <TIM_ITRx_SetConfig>
      break;
 8001e06:	e009      	b.n	8001e1c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4619      	mov	r1, r3
 8001e12:	4610      	mov	r0, r2
 8001e14:	f000 f939 	bl	800208a <TIM_ITRx_SetConfig>
      break;
 8001e18:	e000      	b.n	8001e1c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001e1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	fffeff88 	.word	0xfffeff88

08001e3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a40      	ldr	r2, [pc, #256]	; (8001fa0 <TIM_Base_SetConfig+0x114>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d013      	beq.n	8001ecc <TIM_Base_SetConfig+0x40>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eaa:	d00f      	beq.n	8001ecc <TIM_Base_SetConfig+0x40>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a3d      	ldr	r2, [pc, #244]	; (8001fa4 <TIM_Base_SetConfig+0x118>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d00b      	beq.n	8001ecc <TIM_Base_SetConfig+0x40>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a3c      	ldr	r2, [pc, #240]	; (8001fa8 <TIM_Base_SetConfig+0x11c>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d007      	beq.n	8001ecc <TIM_Base_SetConfig+0x40>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a3b      	ldr	r2, [pc, #236]	; (8001fac <TIM_Base_SetConfig+0x120>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d003      	beq.n	8001ecc <TIM_Base_SetConfig+0x40>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a3a      	ldr	r2, [pc, #232]	; (8001fb0 <TIM_Base_SetConfig+0x124>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d108      	bne.n	8001ede <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ed2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a2f      	ldr	r2, [pc, #188]	; (8001fa0 <TIM_Base_SetConfig+0x114>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d02b      	beq.n	8001f3e <TIM_Base_SetConfig+0xb2>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eec:	d027      	beq.n	8001f3e <TIM_Base_SetConfig+0xb2>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a2c      	ldr	r2, [pc, #176]	; (8001fa4 <TIM_Base_SetConfig+0x118>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d023      	beq.n	8001f3e <TIM_Base_SetConfig+0xb2>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a2b      	ldr	r2, [pc, #172]	; (8001fa8 <TIM_Base_SetConfig+0x11c>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d01f      	beq.n	8001f3e <TIM_Base_SetConfig+0xb2>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a2a      	ldr	r2, [pc, #168]	; (8001fac <TIM_Base_SetConfig+0x120>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d01b      	beq.n	8001f3e <TIM_Base_SetConfig+0xb2>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a29      	ldr	r2, [pc, #164]	; (8001fb0 <TIM_Base_SetConfig+0x124>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d017      	beq.n	8001f3e <TIM_Base_SetConfig+0xb2>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a28      	ldr	r2, [pc, #160]	; (8001fb4 <TIM_Base_SetConfig+0x128>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d013      	beq.n	8001f3e <TIM_Base_SetConfig+0xb2>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a27      	ldr	r2, [pc, #156]	; (8001fb8 <TIM_Base_SetConfig+0x12c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d00f      	beq.n	8001f3e <TIM_Base_SetConfig+0xb2>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a26      	ldr	r2, [pc, #152]	; (8001fbc <TIM_Base_SetConfig+0x130>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d00b      	beq.n	8001f3e <TIM_Base_SetConfig+0xb2>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a25      	ldr	r2, [pc, #148]	; (8001fc0 <TIM_Base_SetConfig+0x134>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d007      	beq.n	8001f3e <TIM_Base_SetConfig+0xb2>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a24      	ldr	r2, [pc, #144]	; (8001fc4 <TIM_Base_SetConfig+0x138>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d003      	beq.n	8001f3e <TIM_Base_SetConfig+0xb2>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a23      	ldr	r2, [pc, #140]	; (8001fc8 <TIM_Base_SetConfig+0x13c>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d108      	bne.n	8001f50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a0a      	ldr	r2, [pc, #40]	; (8001fa0 <TIM_Base_SetConfig+0x114>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d003      	beq.n	8001f84 <TIM_Base_SetConfig+0xf8>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a0c      	ldr	r2, [pc, #48]	; (8001fb0 <TIM_Base_SetConfig+0x124>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d103      	bne.n	8001f8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	691a      	ldr	r2, [r3, #16]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	615a      	str	r2, [r3, #20]
}
 8001f92:	bf00      	nop
 8001f94:	3714      	adds	r7, #20
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	40010000 	.word	0x40010000
 8001fa4:	40000400 	.word	0x40000400
 8001fa8:	40000800 	.word	0x40000800
 8001fac:	40000c00 	.word	0x40000c00
 8001fb0:	40010400 	.word	0x40010400
 8001fb4:	40014000 	.word	0x40014000
 8001fb8:	40014400 	.word	0x40014400
 8001fbc:	40014800 	.word	0x40014800
 8001fc0:	40001800 	.word	0x40001800
 8001fc4:	40001c00 	.word	0x40001c00
 8001fc8:	40002000 	.word	0x40002000

08001fcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b087      	sub	sp, #28
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	f023 0201 	bic.w	r2, r3, #1
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ff6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	011b      	lsls	r3, r3, #4
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	f023 030a 	bic.w	r3, r3, #10
 8002008:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	4313      	orrs	r3, r2
 8002010:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	621a      	str	r2, [r3, #32]
}
 800201e:	bf00      	nop
 8002020:	371c      	adds	r7, #28
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800202a:	b480      	push	{r7}
 800202c:	b087      	sub	sp, #28
 800202e:	af00      	add	r7, sp, #0
 8002030:	60f8      	str	r0, [r7, #12]
 8002032:	60b9      	str	r1, [r7, #8]
 8002034:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	f023 0210 	bic.w	r2, r3, #16
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002054:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	031b      	lsls	r3, r3, #12
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	4313      	orrs	r3, r2
 800205e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002066:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	011b      	lsls	r3, r3, #4
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	4313      	orrs	r3, r2
 8002070:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	697a      	ldr	r2, [r7, #20]
 8002076:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	621a      	str	r2, [r3, #32]
}
 800207e:	bf00      	nop
 8002080:	371c      	adds	r7, #28
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800208a:	b480      	push	{r7}
 800208c:	b085      	sub	sp, #20
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
 8002092:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	f043 0307 	orr.w	r3, r3, #7
 80020ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	609a      	str	r2, [r3, #8]
}
 80020b4:	bf00      	nop
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b087      	sub	sp, #28
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
 80020cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80020da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	021a      	lsls	r2, r3, #8
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	431a      	orrs	r2, r3
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	697a      	ldr	r2, [r7, #20]
 80020f2:	609a      	str	r2, [r3, #8]
}
 80020f4:	bf00      	nop
 80020f6:	371c      	adds	r7, #28
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002110:	2b01      	cmp	r3, #1
 8002112:	d101      	bne.n	8002118 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002114:	2302      	movs	r3, #2
 8002116:	e045      	b.n	80021a4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2202      	movs	r2, #2
 8002124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a1c      	ldr	r2, [pc, #112]	; (80021b0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d004      	beq.n	800214c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a1b      	ldr	r2, [pc, #108]	; (80021b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d108      	bne.n	800215e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002152:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	4313      	orrs	r3, r2
 800215c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002164:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	4313      	orrs	r3, r2
 800216e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002176:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	68ba      	ldr	r2, [r7, #8]
 800217e:	4313      	orrs	r3, r2
 8002180:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68ba      	ldr	r2, [r7, #8]
 8002190:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3714      	adds	r7, #20
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	40010000 	.word	0x40010000
 80021b4:	40010400 	.word	0x40010400

080021b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <_ZN4FSM14exitEv>:

class FSM1 : public tinyfsm::Fsm<FSM1> {
public:
    void react(tinyfsm::Event const &) {};
    virtual void entry(void) {};
    virtual void exit(void) {};
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <_ZN8FSM1_S025entryEv>:

class FSM1_S02;    /* Two */
class FSM1_S01;    /* (ENTRY)One */

class FSM1_S02 : public FSM1 {
    void entry() {
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
        start_timer(TIMER_1, 1000);
 8002210:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002214:	2001      	movs	r0, #1
 8002216:	f001 f937 	bl	8003488 <_Z11start_timer5Timeri>
        state_S02();
 800221a:	f001 f8f9 	bl	8003410 <_Z9state_S02v>
    }
 800221e:	bf00      	nop
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <_ZN8FSM1_S025reactERK13TIMER_1_EVENT>:

    void react(TIMER_1_EVENT const &) override {
 8002226:	b580      	push	{r7, lr}
 8002228:	b082      	sub	sp, #8
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	6039      	str	r1, [r7, #0]
        stop_timer(TIMER_1);
 8002230:	2001      	movs	r0, #1
 8002232:	f001 f99f 	bl	8003574 <_Z10stop_timer5Timer>
        transit<FSM1_S01>();
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 f830 	bl	800229c <_ZN7tinyfsm3FsmI4FSM1E7transitI8FSM1_S01EEvv>
    }
 800223c:	bf00      	nop
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <_ZN8FSM1_S015entryEv>:
};

class FSM1_S01 : public FSM1 {
    void entry() {
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
        start_timer(TIMER_1, 1000);
 800224c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002250:	2001      	movs	r0, #1
 8002252:	f001 f919 	bl	8003488 <_Z11start_timer5Timeri>
        state_S01();
 8002256:	f001 f8cf 	bl	80033f8 <_Z9state_S01v>
    }
 800225a:	bf00      	nop
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <_ZN8FSM1_S015reactERK13TIMER_1_EVENT>:

    void react(TIMER_1_EVENT const &) override {
 8002262:	b580      	push	{r7, lr}
 8002264:	b082      	sub	sp, #8
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
 800226a:	6039      	str	r1, [r7, #0]
        stop_timer(TIMER_1);
 800226c:	2001      	movs	r0, #1
 800226e:	f001 f981 	bl	8003574 <_Z10stop_timer5Timer>
        transit<FSM1_S02>();
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 f832 	bl	80022dc <_ZN7tinyfsm3FsmI4FSM1E7transitI8FSM1_S02EEvv>
    }
 8002278:	bf00      	nop
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <_ZN7tinyfsm3FsmI4FSM1E17set_initial_stateEv>:
};

FSM_INITIAL_STATE(FSM1, FSM1_S01);
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
 8002284:	4b03      	ldr	r3, [pc, #12]	; (8002294 <_ZN7tinyfsm3FsmI4FSM1E17set_initial_stateEv+0x14>)
 8002286:	4a04      	ldr	r2, [pc, #16]	; (8002298 <_ZN7tinyfsm3FsmI4FSM1E17set_initial_stateEv+0x18>)
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	bf00      	nop
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	20000040 	.word	0x20000040
 8002298:	20000008 	.word	0x20000008

0800229c <_ZN7tinyfsm3FsmI4FSM1E7transitI8FSM1_S01EEvv>:

  /// state transition functions
  protected:

    template<typename S>
    void transit(void) {
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
      static_assert(is_same_fsm<F, S>::value, "transit to different state machine");
      current_state_ptr->exit();
 80022a4:	4b0b      	ldr	r3, [pc, #44]	; (80022d4 <_ZN7tinyfsm3FsmI4FSM1E7transitI8FSM1_S01EEvv+0x38>)
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	4b0a      	ldr	r3, [pc, #40]	; (80022d4 <_ZN7tinyfsm3FsmI4FSM1E7transitI8FSM1_S01EEvv+0x38>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	3304      	adds	r3, #4
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4610      	mov	r0, r2
 80022b4:	4798      	blx	r3
      current_state_ptr = &_state_instance<S>::value;
 80022b6:	4b07      	ldr	r3, [pc, #28]	; (80022d4 <_ZN7tinyfsm3FsmI4FSM1E7transitI8FSM1_S01EEvv+0x38>)
 80022b8:	4a07      	ldr	r2, [pc, #28]	; (80022d8 <_ZN7tinyfsm3FsmI4FSM1E7transitI8FSM1_S01EEvv+0x3c>)
 80022ba:	601a      	str	r2, [r3, #0]
      current_state_ptr->entry();
 80022bc:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <_ZN7tinyfsm3FsmI4FSM1E7transitI8FSM1_S01EEvv+0x38>)
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	4b04      	ldr	r3, [pc, #16]	; (80022d4 <_ZN7tinyfsm3FsmI4FSM1E7transitI8FSM1_S01EEvv+0x38>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4610      	mov	r0, r2
 80022ca:	4798      	blx	r3
    }
 80022cc:	bf00      	nop
 80022ce:	3708      	adds	r7, #8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	20000040 	.word	0x20000040
 80022d8:	20000008 	.word	0x20000008

080022dc <_ZN7tinyfsm3FsmI4FSM1E7transitI8FSM1_S02EEvv>:
    void transit(void) {
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
      current_state_ptr->exit();
 80022e4:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <_ZN7tinyfsm3FsmI4FSM1E7transitI8FSM1_S02EEvv+0x38>)
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <_ZN7tinyfsm3FsmI4FSM1E7transitI8FSM1_S02EEvv+0x38>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	3304      	adds	r3, #4
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4610      	mov	r0, r2
 80022f4:	4798      	blx	r3
      current_state_ptr = &_state_instance<S>::value;
 80022f6:	4b07      	ldr	r3, [pc, #28]	; (8002314 <_ZN7tinyfsm3FsmI4FSM1E7transitI8FSM1_S02EEvv+0x38>)
 80022f8:	4a07      	ldr	r2, [pc, #28]	; (8002318 <_ZN7tinyfsm3FsmI4FSM1E7transitI8FSM1_S02EEvv+0x3c>)
 80022fa:	601a      	str	r2, [r3, #0]
      current_state_ptr->entry();
 80022fc:	4b05      	ldr	r3, [pc, #20]	; (8002314 <_ZN7tinyfsm3FsmI4FSM1E7transitI8FSM1_S02EEvv+0x38>)
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	4b04      	ldr	r3, [pc, #16]	; (8002314 <_ZN7tinyfsm3FsmI4FSM1E7transitI8FSM1_S02EEvv+0x38>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4610      	mov	r0, r2
 800230a:	4798      	blx	r3
    }
 800230c:	bf00      	nop
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	20000040 	.word	0x20000040
 8002318:	2000000c 	.word	0x2000000c

0800231c <_ZN4FSM24exitEv>:

class FSM2 : public tinyfsm::Fsm<FSM2> {
public:
    void react(tinyfsm::Event const &) {};
    virtual void entry(void) {};
    virtual void exit(void) {};
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <_ZN8FSM2_S035entryEv>:

class FSM2_S03;    /* (ENTRY)Three */
class FSM2_S04;    /* Four */

class FSM2_S03 : public FSM2 {
    void entry() {
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
        start_timer(TIMER_2, 500);
 8002338:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800233c:	2002      	movs	r0, #2
 800233e:	f001 f8a3 	bl	8003488 <_Z11start_timer5Timeri>
        state_S03();
 8002342:	f001 f871 	bl	8003428 <_Z9state_S03v>
    }
 8002346:	bf00      	nop
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <_ZN8FSM2_S035reactERK13TIMER_2_EVENT>:

    void react(TIMER_2_EVENT const &) override {
 800234e:	b580      	push	{r7, lr}
 8002350:	b082      	sub	sp, #8
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
 8002356:	6039      	str	r1, [r7, #0]
        stop_timer(TIMER_2);
 8002358:	2002      	movs	r0, #2
 800235a:	f001 f90b 	bl	8003574 <_Z10stop_timer5Timer>
        transit<FSM2_S04>();
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 f830 	bl	80023c4 <_ZN7tinyfsm3FsmI4FSM2E7transitI8FSM2_S04EEvv>
    }
 8002364:	bf00      	nop
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <_ZN8FSM2_S045entryEv>:
};

class FSM2_S04 : public FSM2 {
    void entry() {
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
        start_timer(TIMER_2, 500);
 8002374:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002378:	2002      	movs	r0, #2
 800237a:	f001 f885 	bl	8003488 <_Z11start_timer5Timeri>
        state_S04();
 800237e:	f001 f85f 	bl	8003440 <_Z9state_S04v>
    }
 8002382:	bf00      	nop
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <_ZN8FSM2_S045reactERK13TIMER_2_EVENT>:

    void react(TIMER_2_EVENT const &) override {
 800238a:	b580      	push	{r7, lr}
 800238c:	b082      	sub	sp, #8
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
 8002392:	6039      	str	r1, [r7, #0]
        stop_timer(TIMER_2);
 8002394:	2002      	movs	r0, #2
 8002396:	f001 f8ed 	bl	8003574 <_Z10stop_timer5Timer>
        transit<FSM2_S03>();
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 f832 	bl	8002404 <_ZN7tinyfsm3FsmI4FSM2E7transitI8FSM2_S03EEvv>
    }
 80023a0:	bf00      	nop
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <_ZN7tinyfsm3FsmI4FSM2E17set_initial_stateEv>:
};

FSM_INITIAL_STATE(FSM2, FSM2_S03);
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	4b03      	ldr	r3, [pc, #12]	; (80023bc <_ZN7tinyfsm3FsmI4FSM2E17set_initial_stateEv+0x14>)
 80023ae:	4a04      	ldr	r2, [pc, #16]	; (80023c0 <_ZN7tinyfsm3FsmI4FSM2E17set_initial_stateEv+0x18>)
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	bf00      	nop
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	20000044 	.word	0x20000044
 80023c0:	20000010 	.word	0x20000010

080023c4 <_ZN7tinyfsm3FsmI4FSM2E7transitI8FSM2_S04EEvv>:
    void transit(void) {
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
      current_state_ptr->exit();
 80023cc:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <_ZN7tinyfsm3FsmI4FSM2E7transitI8FSM2_S04EEvv+0x38>)
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	4b0a      	ldr	r3, [pc, #40]	; (80023fc <_ZN7tinyfsm3FsmI4FSM2E7transitI8FSM2_S04EEvv+0x38>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	3304      	adds	r3, #4
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4610      	mov	r0, r2
 80023dc:	4798      	blx	r3
      current_state_ptr = &_state_instance<S>::value;
 80023de:	4b07      	ldr	r3, [pc, #28]	; (80023fc <_ZN7tinyfsm3FsmI4FSM2E7transitI8FSM2_S04EEvv+0x38>)
 80023e0:	4a07      	ldr	r2, [pc, #28]	; (8002400 <_ZN7tinyfsm3FsmI4FSM2E7transitI8FSM2_S04EEvv+0x3c>)
 80023e2:	601a      	str	r2, [r3, #0]
      current_state_ptr->entry();
 80023e4:	4b05      	ldr	r3, [pc, #20]	; (80023fc <_ZN7tinyfsm3FsmI4FSM2E7transitI8FSM2_S04EEvv+0x38>)
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	4b04      	ldr	r3, [pc, #16]	; (80023fc <_ZN7tinyfsm3FsmI4FSM2E7transitI8FSM2_S04EEvv+0x38>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4610      	mov	r0, r2
 80023f2:	4798      	blx	r3
    }
 80023f4:	bf00      	nop
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	20000044 	.word	0x20000044
 8002400:	20000014 	.word	0x20000014

08002404 <_ZN7tinyfsm3FsmI4FSM2E7transitI8FSM2_S03EEvv>:
    void transit(void) {
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
      current_state_ptr->exit();
 800240c:	4b0b      	ldr	r3, [pc, #44]	; (800243c <_ZN7tinyfsm3FsmI4FSM2E7transitI8FSM2_S03EEvv+0x38>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	4b0a      	ldr	r3, [pc, #40]	; (800243c <_ZN7tinyfsm3FsmI4FSM2E7transitI8FSM2_S03EEvv+0x38>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	3304      	adds	r3, #4
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4610      	mov	r0, r2
 800241c:	4798      	blx	r3
      current_state_ptr = &_state_instance<S>::value;
 800241e:	4b07      	ldr	r3, [pc, #28]	; (800243c <_ZN7tinyfsm3FsmI4FSM2E7transitI8FSM2_S03EEvv+0x38>)
 8002420:	4a07      	ldr	r2, [pc, #28]	; (8002440 <_ZN7tinyfsm3FsmI4FSM2E7transitI8FSM2_S03EEvv+0x3c>)
 8002422:	601a      	str	r2, [r3, #0]
      current_state_ptr->entry();
 8002424:	4b05      	ldr	r3, [pc, #20]	; (800243c <_ZN7tinyfsm3FsmI4FSM2E7transitI8FSM2_S03EEvv+0x38>)
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	4b04      	ldr	r3, [pc, #16]	; (800243c <_ZN7tinyfsm3FsmI4FSM2E7transitI8FSM2_S03EEvv+0x38>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4610      	mov	r0, r2
 8002432:	4798      	blx	r3
    }
 8002434:	bf00      	nop
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	20000044 	.word	0x20000044
 8002440:	20000010 	.word	0x20000010

08002444 <_ZN4FSM34exitEv>:

class FSM3 : public tinyfsm::Fsm<FSM3> {
public:
    void react(tinyfsm::Event const &) {};
    virtual void entry(void) {};
    virtual void exit(void) {};
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <_ZN8FSM3_S055entryEv>:

class FSM3_S05;    /* (ENTRY)Five */
class FSM3_S06;    /* Six */

class FSM3_S05 : public FSM3 {
    void entry() {
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
        start_timer(TIMER_3, 250);
 8002460:	21fa      	movs	r1, #250	; 0xfa
 8002462:	2000      	movs	r0, #0
 8002464:	f001 f810 	bl	8003488 <_Z11start_timer5Timeri>
        state_S05();
 8002468:	f000 fff6 	bl	8003458 <_Z9state_S05v>
    }
 800246c:	bf00      	nop
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <_ZN8FSM3_S055reactERK13TIMER_3_EVENT>:

    void react(TIMER_3_EVENT const &) override {
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
        stop_timer(TIMER_3);
 800247e:	2000      	movs	r0, #0
 8002480:	f001 f878 	bl	8003574 <_Z10stop_timer5Timer>
        transit<FSM3_S06>();
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 f82f 	bl	80024e8 <_ZN7tinyfsm3FsmI4FSM3E7transitI8FSM3_S06EEvv>
    }
 800248a:	bf00      	nop
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <_ZN8FSM3_S065entryEv>:
};

class FSM3_S06 : public FSM3 {
    void entry() {
 8002492:	b580      	push	{r7, lr}
 8002494:	b082      	sub	sp, #8
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
        start_timer(TIMER_3, 250);
 800249a:	21fa      	movs	r1, #250	; 0xfa
 800249c:	2000      	movs	r0, #0
 800249e:	f000 fff3 	bl	8003488 <_Z11start_timer5Timeri>
        state_S06();
 80024a2:	f000 ffe5 	bl	8003470 <_Z9state_S06v>
    }
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <_ZN8FSM3_S065reactERK13TIMER_3_EVENT>:

    void react(TIMER_3_EVENT const &) override {
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b082      	sub	sp, #8
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
 80024b6:	6039      	str	r1, [r7, #0]
        stop_timer(TIMER_3);
 80024b8:	2000      	movs	r0, #0
 80024ba:	f001 f85b 	bl	8003574 <_Z10stop_timer5Timer>
        transit<FSM3_S05>();
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f832 	bl	8002528 <_ZN7tinyfsm3FsmI4FSM3E7transitI8FSM3_S05EEvv>
    }
 80024c4:	bf00      	nop
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <_ZN7tinyfsm3FsmI4FSM3E17set_initial_stateEv>:
};

FSM_INITIAL_STATE(FSM3, FSM3_S05);
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	4b03      	ldr	r3, [pc, #12]	; (80024e0 <_ZN7tinyfsm3FsmI4FSM3E17set_initial_stateEv+0x14>)
 80024d2:	4a04      	ldr	r2, [pc, #16]	; (80024e4 <_ZN7tinyfsm3FsmI4FSM3E17set_initial_stateEv+0x18>)
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	bf00      	nop
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	20000048 	.word	0x20000048
 80024e4:	20000018 	.word	0x20000018

080024e8 <_ZN7tinyfsm3FsmI4FSM3E7transitI8FSM3_S06EEvv>:
    void transit(void) {
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
      current_state_ptr->exit();
 80024f0:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <_ZN7tinyfsm3FsmI4FSM3E7transitI8FSM3_S06EEvv+0x38>)
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <_ZN7tinyfsm3FsmI4FSM3E7transitI8FSM3_S06EEvv+0x38>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	3304      	adds	r3, #4
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4610      	mov	r0, r2
 8002500:	4798      	blx	r3
      current_state_ptr = &_state_instance<S>::value;
 8002502:	4b07      	ldr	r3, [pc, #28]	; (8002520 <_ZN7tinyfsm3FsmI4FSM3E7transitI8FSM3_S06EEvv+0x38>)
 8002504:	4a07      	ldr	r2, [pc, #28]	; (8002524 <_ZN7tinyfsm3FsmI4FSM3E7transitI8FSM3_S06EEvv+0x3c>)
 8002506:	601a      	str	r2, [r3, #0]
      current_state_ptr->entry();
 8002508:	4b05      	ldr	r3, [pc, #20]	; (8002520 <_ZN7tinyfsm3FsmI4FSM3E7transitI8FSM3_S06EEvv+0x38>)
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	4b04      	ldr	r3, [pc, #16]	; (8002520 <_ZN7tinyfsm3FsmI4FSM3E7transitI8FSM3_S06EEvv+0x38>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4610      	mov	r0, r2
 8002516:	4798      	blx	r3
    }
 8002518:	bf00      	nop
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20000048 	.word	0x20000048
 8002524:	2000001c 	.word	0x2000001c

08002528 <_ZN7tinyfsm3FsmI4FSM3E7transitI8FSM3_S05EEvv>:
    void transit(void) {
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
      current_state_ptr->exit();
 8002530:	4b0b      	ldr	r3, [pc, #44]	; (8002560 <_ZN7tinyfsm3FsmI4FSM3E7transitI8FSM3_S05EEvv+0x38>)
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	4b0a      	ldr	r3, [pc, #40]	; (8002560 <_ZN7tinyfsm3FsmI4FSM3E7transitI8FSM3_S05EEvv+0x38>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	3304      	adds	r3, #4
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4610      	mov	r0, r2
 8002540:	4798      	blx	r3
      current_state_ptr = &_state_instance<S>::value;
 8002542:	4b07      	ldr	r3, [pc, #28]	; (8002560 <_ZN7tinyfsm3FsmI4FSM3E7transitI8FSM3_S05EEvv+0x38>)
 8002544:	4a07      	ldr	r2, [pc, #28]	; (8002564 <_ZN7tinyfsm3FsmI4FSM3E7transitI8FSM3_S05EEvv+0x3c>)
 8002546:	601a      	str	r2, [r3, #0]
      current_state_ptr->entry();
 8002548:	4b05      	ldr	r3, [pc, #20]	; (8002560 <_ZN7tinyfsm3FsmI4FSM3E7transitI8FSM3_S05EEvv+0x38>)
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	4b04      	ldr	r3, [pc, #16]	; (8002560 <_ZN7tinyfsm3FsmI4FSM3E7transitI8FSM3_S05EEvv+0x38>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4610      	mov	r0, r2
 8002556:	4798      	blx	r3
    }
 8002558:	bf00      	nop
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	20000048 	.word	0x20000048
 8002564:	20000018 	.word	0x20000018

08002568 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800256e:	463b      	mov	r3, r7
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	605a      	str	r2, [r3, #4]
 8002576:	609a      	str	r2, [r3, #8]
 8002578:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800257a:	4b21      	ldr	r3, [pc, #132]	; (8002600 <MX_ADC1_Init+0x98>)
 800257c:	4a21      	ldr	r2, [pc, #132]	; (8002604 <MX_ADC1_Init+0x9c>)
 800257e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002580:	4b1f      	ldr	r3, [pc, #124]	; (8002600 <MX_ADC1_Init+0x98>)
 8002582:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002586:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002588:	4b1d      	ldr	r3, [pc, #116]	; (8002600 <MX_ADC1_Init+0x98>)
 800258a:	2200      	movs	r2, #0
 800258c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800258e:	4b1c      	ldr	r3, [pc, #112]	; (8002600 <MX_ADC1_Init+0x98>)
 8002590:	2200      	movs	r2, #0
 8002592:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002594:	4b1a      	ldr	r3, [pc, #104]	; (8002600 <MX_ADC1_Init+0x98>)
 8002596:	2200      	movs	r2, #0
 8002598:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800259a:	4b19      	ldr	r3, [pc, #100]	; (8002600 <MX_ADC1_Init+0x98>)
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80025a2:	4b17      	ldr	r3, [pc, #92]	; (8002600 <MX_ADC1_Init+0x98>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80025a8:	4b15      	ldr	r3, [pc, #84]	; (8002600 <MX_ADC1_Init+0x98>)
 80025aa:	4a17      	ldr	r2, [pc, #92]	; (8002608 <MX_ADC1_Init+0xa0>)
 80025ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80025ae:	4b14      	ldr	r3, [pc, #80]	; (8002600 <MX_ADC1_Init+0x98>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80025b4:	4b12      	ldr	r3, [pc, #72]	; (8002600 <MX_ADC1_Init+0x98>)
 80025b6:	2201      	movs	r2, #1
 80025b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80025ba:	4b11      	ldr	r3, [pc, #68]	; (8002600 <MX_ADC1_Init+0x98>)
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80025c2:	4b0f      	ldr	r3, [pc, #60]	; (8002600 <MX_ADC1_Init+0x98>)
 80025c4:	2201      	movs	r2, #1
 80025c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80025c8:	480d      	ldr	r0, [pc, #52]	; (8002600 <MX_ADC1_Init+0x98>)
 80025ca:	f7fe f813 	bl	80005f4 <HAL_ADC_Init>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80025d4:	f000 fd16 	bl	8003004 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80025d8:	2304      	movs	r3, #4
 80025da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80025dc:	2301      	movs	r3, #1
 80025de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80025e0:	2300      	movs	r3, #0
 80025e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025e4:	463b      	mov	r3, r7
 80025e6:	4619      	mov	r1, r3
 80025e8:	4805      	ldr	r0, [pc, #20]	; (8002600 <MX_ADC1_Init+0x98>)
 80025ea:	f7fe f847 	bl	800067c <HAL_ADC_ConfigChannel>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80025f4:	f000 fd06 	bl	8003004 <Error_Handler>
  }

}
 80025f8:	bf00      	nop
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	20000110 	.word	0x20000110
 8002604:	40012000 	.word	0x40012000
 8002608:	0f000001 	.word	0x0f000001

0800260c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002612:	463b      	mov	r3, r7
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	605a      	str	r2, [r3, #4]
 800261a:	609a      	str	r2, [r3, #8]
 800261c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 800261e:	4b21      	ldr	r3, [pc, #132]	; (80026a4 <MX_ADC2_Init+0x98>)
 8002620:	4a21      	ldr	r2, [pc, #132]	; (80026a8 <MX_ADC2_Init+0x9c>)
 8002622:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002624:	4b1f      	ldr	r3, [pc, #124]	; (80026a4 <MX_ADC2_Init+0x98>)
 8002626:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800262a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800262c:	4b1d      	ldr	r3, [pc, #116]	; (80026a4 <MX_ADC2_Init+0x98>)
 800262e:	2200      	movs	r2, #0
 8002630:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002632:	4b1c      	ldr	r3, [pc, #112]	; (80026a4 <MX_ADC2_Init+0x98>)
 8002634:	2200      	movs	r2, #0
 8002636:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002638:	4b1a      	ldr	r3, [pc, #104]	; (80026a4 <MX_ADC2_Init+0x98>)
 800263a:	2200      	movs	r2, #0
 800263c:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800263e:	4b19      	ldr	r3, [pc, #100]	; (80026a4 <MX_ADC2_Init+0x98>)
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002646:	4b17      	ldr	r3, [pc, #92]	; (80026a4 <MX_ADC2_Init+0x98>)
 8002648:	2200      	movs	r2, #0
 800264a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800264c:	4b15      	ldr	r3, [pc, #84]	; (80026a4 <MX_ADC2_Init+0x98>)
 800264e:	4a17      	ldr	r2, [pc, #92]	; (80026ac <MX_ADC2_Init+0xa0>)
 8002650:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002652:	4b14      	ldr	r3, [pc, #80]	; (80026a4 <MX_ADC2_Init+0x98>)
 8002654:	2200      	movs	r2, #0
 8002656:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8002658:	4b12      	ldr	r3, [pc, #72]	; (80026a4 <MX_ADC2_Init+0x98>)
 800265a:	2201      	movs	r2, #1
 800265c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800265e:	4b11      	ldr	r3, [pc, #68]	; (80026a4 <MX_ADC2_Init+0x98>)
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002666:	4b0f      	ldr	r3, [pc, #60]	; (80026a4 <MX_ADC2_Init+0x98>)
 8002668:	2201      	movs	r2, #1
 800266a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800266c:	480d      	ldr	r0, [pc, #52]	; (80026a4 <MX_ADC2_Init+0x98>)
 800266e:	f7fd ffc1 	bl	80005f4 <HAL_ADC_Init>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8002678:	f000 fcc4 	bl	8003004 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800267c:	2304      	movs	r3, #4
 800267e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002680:	2301      	movs	r3, #1
 8002682:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002684:	2300      	movs	r3, #0
 8002686:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002688:	463b      	mov	r3, r7
 800268a:	4619      	mov	r1, r3
 800268c:	4805      	ldr	r0, [pc, #20]	; (80026a4 <MX_ADC2_Init+0x98>)
 800268e:	f7fd fff5 	bl	800067c <HAL_ADC_ConfigChannel>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8002698:	f000 fcb4 	bl	8003004 <Error_Handler>
  }

}
 800269c:	bf00      	nop
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	200000c8 	.word	0x200000c8
 80026a8:	40012100 	.word	0x40012100
 80026ac:	0f000001 	.word	0x0f000001

080026b0 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80026b6:	463b      	mov	r3, r7
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	605a      	str	r2, [r3, #4]
 80026be:	609a      	str	r2, [r3, #8]
 80026c0:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 80026c2:	4b21      	ldr	r3, [pc, #132]	; (8002748 <MX_ADC3_Init+0x98>)
 80026c4:	4a21      	ldr	r2, [pc, #132]	; (800274c <MX_ADC3_Init+0x9c>)
 80026c6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80026c8:	4b1f      	ldr	r3, [pc, #124]	; (8002748 <MX_ADC3_Init+0x98>)
 80026ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80026ce:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80026d0:	4b1d      	ldr	r3, [pc, #116]	; (8002748 <MX_ADC3_Init+0x98>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80026d6:	4b1c      	ldr	r3, [pc, #112]	; (8002748 <MX_ADC3_Init+0x98>)
 80026d8:	2200      	movs	r2, #0
 80026da:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80026dc:	4b1a      	ldr	r3, [pc, #104]	; (8002748 <MX_ADC3_Init+0x98>)
 80026de:	2200      	movs	r2, #0
 80026e0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80026e2:	4b19      	ldr	r3, [pc, #100]	; (8002748 <MX_ADC3_Init+0x98>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80026ea:	4b17      	ldr	r3, [pc, #92]	; (8002748 <MX_ADC3_Init+0x98>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80026f0:	4b15      	ldr	r3, [pc, #84]	; (8002748 <MX_ADC3_Init+0x98>)
 80026f2:	4a17      	ldr	r2, [pc, #92]	; (8002750 <MX_ADC3_Init+0xa0>)
 80026f4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80026f6:	4b14      	ldr	r3, [pc, #80]	; (8002748 <MX_ADC3_Init+0x98>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80026fc:	4b12      	ldr	r3, [pc, #72]	; (8002748 <MX_ADC3_Init+0x98>)
 80026fe:	2201      	movs	r2, #1
 8002700:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8002702:	4b11      	ldr	r3, [pc, #68]	; (8002748 <MX_ADC3_Init+0x98>)
 8002704:	2200      	movs	r2, #0
 8002706:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800270a:	4b0f      	ldr	r3, [pc, #60]	; (8002748 <MX_ADC3_Init+0x98>)
 800270c:	2201      	movs	r2, #1
 800270e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002710:	480d      	ldr	r0, [pc, #52]	; (8002748 <MX_ADC3_Init+0x98>)
 8002712:	f7fd ff6f 	bl	80005f4 <HAL_ADC_Init>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800271c:	f000 fc72 	bl	8003004 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002720:	2304      	movs	r3, #4
 8002722:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002724:	2301      	movs	r3, #1
 8002726:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002728:	2300      	movs	r3, #0
 800272a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800272c:	463b      	mov	r3, r7
 800272e:	4619      	mov	r1, r3
 8002730:	4805      	ldr	r0, [pc, #20]	; (8002748 <MX_ADC3_Init+0x98>)
 8002732:	f7fd ffa3 	bl	800067c <HAL_ADC_ConfigChannel>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800273c:	f000 fc62 	bl	8003004 <Error_Handler>
  }

}
 8002740:	bf00      	nop
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	20000158 	.word	0x20000158
 800274c:	40012200 	.word	0x40012200
 8002750:	0f000001 	.word	0x0f000001

08002754 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b090      	sub	sp, #64	; 0x40
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800275c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	605a      	str	r2, [r3, #4]
 8002766:	609a      	str	r2, [r3, #8]
 8002768:	60da      	str	r2, [r3, #12]
 800276a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a63      	ldr	r2, [pc, #396]	; (8002900 <HAL_ADC_MspInit+0x1ac>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d13c      	bne.n	80027f0 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002776:	4b63      	ldr	r3, [pc, #396]	; (8002904 <HAL_ADC_MspInit+0x1b0>)
 8002778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277a:	4a62      	ldr	r2, [pc, #392]	; (8002904 <HAL_ADC_MspInit+0x1b0>)
 800277c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002780:	6453      	str	r3, [r2, #68]	; 0x44
 8002782:	4b60      	ldr	r3, [pc, #384]	; (8002904 <HAL_ADC_MspInit+0x1b0>)
 8002784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278a:	62bb      	str	r3, [r7, #40]	; 0x28
 800278c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800278e:	4b5d      	ldr	r3, [pc, #372]	; (8002904 <HAL_ADC_MspInit+0x1b0>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	4a5c      	ldr	r2, [pc, #368]	; (8002904 <HAL_ADC_MspInit+0x1b0>)
 8002794:	f043 0304 	orr.w	r3, r3, #4
 8002798:	6313      	str	r3, [r2, #48]	; 0x30
 800279a:	4b5a      	ldr	r3, [pc, #360]	; (8002904 <HAL_ADC_MspInit+0x1b0>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	f003 0304 	and.w	r3, r3, #4
 80027a2:	627b      	str	r3, [r7, #36]	; 0x24
 80027a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a6:	4b57      	ldr	r3, [pc, #348]	; (8002904 <HAL_ADC_MspInit+0x1b0>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	4a56      	ldr	r2, [pc, #344]	; (8002904 <HAL_ADC_MspInit+0x1b0>)
 80027ac:	f043 0301 	orr.w	r3, r3, #1
 80027b0:	6313      	str	r3, [r2, #48]	; 0x30
 80027b2:	4b54      	ldr	r3, [pc, #336]	; (8002904 <HAL_ADC_MspInit+0x1b0>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	623b      	str	r3, [r7, #32]
 80027bc:	6a3b      	ldr	r3, [r7, #32]
    PC0     ------> ADC1_IN10
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80027be:	2301      	movs	r3, #1
 80027c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027c2:	2303      	movs	r3, #3
 80027c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c6:	2300      	movs	r3, #0
 80027c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027ce:	4619      	mov	r1, r3
 80027d0:	484d      	ldr	r0, [pc, #308]	; (8002908 <HAL_ADC_MspInit+0x1b4>)
 80027d2:	f7fe fa93 	bl	8000cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80027d6:	2370      	movs	r3, #112	; 0x70
 80027d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027da:	2303      	movs	r3, #3
 80027dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027de:	2300      	movs	r3, #0
 80027e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027e6:	4619      	mov	r1, r3
 80027e8:	4848      	ldr	r0, [pc, #288]	; (800290c <HAL_ADC_MspInit+0x1b8>)
 80027ea:	f7fe fa87 	bl	8000cfc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80027ee:	e083      	b.n	80028f8 <HAL_ADC_MspInit+0x1a4>
  else if(adcHandle->Instance==ADC2)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a46      	ldr	r2, [pc, #280]	; (8002910 <HAL_ADC_MspInit+0x1bc>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d13c      	bne.n	8002874 <HAL_ADC_MspInit+0x120>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80027fa:	4b42      	ldr	r3, [pc, #264]	; (8002904 <HAL_ADC_MspInit+0x1b0>)
 80027fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fe:	4a41      	ldr	r2, [pc, #260]	; (8002904 <HAL_ADC_MspInit+0x1b0>)
 8002800:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002804:	6453      	str	r3, [r2, #68]	; 0x44
 8002806:	4b3f      	ldr	r3, [pc, #252]	; (8002904 <HAL_ADC_MspInit+0x1b0>)
 8002808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800280e:	61fb      	str	r3, [r7, #28]
 8002810:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002812:	4b3c      	ldr	r3, [pc, #240]	; (8002904 <HAL_ADC_MspInit+0x1b0>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	4a3b      	ldr	r2, [pc, #236]	; (8002904 <HAL_ADC_MspInit+0x1b0>)
 8002818:	f043 0304 	orr.w	r3, r3, #4
 800281c:	6313      	str	r3, [r2, #48]	; 0x30
 800281e:	4b39      	ldr	r3, [pc, #228]	; (8002904 <HAL_ADC_MspInit+0x1b0>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	f003 0304 	and.w	r3, r3, #4
 8002826:	61bb      	str	r3, [r7, #24]
 8002828:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800282a:	4b36      	ldr	r3, [pc, #216]	; (8002904 <HAL_ADC_MspInit+0x1b0>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	4a35      	ldr	r2, [pc, #212]	; (8002904 <HAL_ADC_MspInit+0x1b0>)
 8002830:	f043 0301 	orr.w	r3, r3, #1
 8002834:	6313      	str	r3, [r2, #48]	; 0x30
 8002836:	4b33      	ldr	r3, [pc, #204]	; (8002904 <HAL_ADC_MspInit+0x1b0>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	617b      	str	r3, [r7, #20]
 8002840:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002842:	2301      	movs	r3, #1
 8002844:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002846:	2303      	movs	r3, #3
 8002848:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284a:	2300      	movs	r3, #0
 800284c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800284e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002852:	4619      	mov	r1, r3
 8002854:	482c      	ldr	r0, [pc, #176]	; (8002908 <HAL_ADC_MspInit+0x1b4>)
 8002856:	f7fe fa51 	bl	8000cfc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800285a:	2370      	movs	r3, #112	; 0x70
 800285c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800285e:	2303      	movs	r3, #3
 8002860:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002862:	2300      	movs	r3, #0
 8002864:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002866:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800286a:	4619      	mov	r1, r3
 800286c:	4827      	ldr	r0, [pc, #156]	; (800290c <HAL_ADC_MspInit+0x1b8>)
 800286e:	f7fe fa45 	bl	8000cfc <HAL_GPIO_Init>
}
 8002872:	e041      	b.n	80028f8 <HAL_ADC_MspInit+0x1a4>
  else if(adcHandle->Instance==ADC3)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a26      	ldr	r2, [pc, #152]	; (8002914 <HAL_ADC_MspInit+0x1c0>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d13c      	bne.n	80028f8 <HAL_ADC_MspInit+0x1a4>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800287e:	4b21      	ldr	r3, [pc, #132]	; (8002904 <HAL_ADC_MspInit+0x1b0>)
 8002880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002882:	4a20      	ldr	r2, [pc, #128]	; (8002904 <HAL_ADC_MspInit+0x1b0>)
 8002884:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002888:	6453      	str	r3, [r2, #68]	; 0x44
 800288a:	4b1e      	ldr	r3, [pc, #120]	; (8002904 <HAL_ADC_MspInit+0x1b0>)
 800288c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002892:	613b      	str	r3, [r7, #16]
 8002894:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002896:	4b1b      	ldr	r3, [pc, #108]	; (8002904 <HAL_ADC_MspInit+0x1b0>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	4a1a      	ldr	r2, [pc, #104]	; (8002904 <HAL_ADC_MspInit+0x1b0>)
 800289c:	f043 0320 	orr.w	r3, r3, #32
 80028a0:	6313      	str	r3, [r2, #48]	; 0x30
 80028a2:	4b18      	ldr	r3, [pc, #96]	; (8002904 <HAL_ADC_MspInit+0x1b0>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	f003 0320 	and.w	r3, r3, #32
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ae:	4b15      	ldr	r3, [pc, #84]	; (8002904 <HAL_ADC_MspInit+0x1b0>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	4a14      	ldr	r2, [pc, #80]	; (8002904 <HAL_ADC_MspInit+0x1b0>)
 80028b4:	f043 0304 	orr.w	r3, r3, #4
 80028b8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ba:	4b12      	ldr	r3, [pc, #72]	; (8002904 <HAL_ADC_MspInit+0x1b0>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	f003 0304 	and.w	r3, r3, #4
 80028c2:	60bb      	str	r3, [r7, #8]
 80028c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 80028c6:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 80028ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028cc:	2303      	movs	r3, #3
 80028ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80028d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028d8:	4619      	mov	r1, r3
 80028da:	480f      	ldr	r0, [pc, #60]	; (8002918 <HAL_ADC_MspInit+0x1c4>)
 80028dc:	f7fe fa0e 	bl	8000cfc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80028e0:	2301      	movs	r3, #1
 80028e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028e4:	2303      	movs	r3, #3
 80028e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e8:	2300      	movs	r3, #0
 80028ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028f0:	4619      	mov	r1, r3
 80028f2:	4805      	ldr	r0, [pc, #20]	; (8002908 <HAL_ADC_MspInit+0x1b4>)
 80028f4:	f7fe fa02 	bl	8000cfc <HAL_GPIO_Init>
}
 80028f8:	bf00      	nop
 80028fa:	3740      	adds	r7, #64	; 0x40
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40012000 	.word	0x40012000
 8002904:	40023800 	.word	0x40023800
 8002908:	40020800 	.word	0x40020800
 800290c:	40020000 	.word	0x40020000
 8002910:	40012100 	.word	0x40012100
 8002914:	40012200 	.word	0x40012200
 8002918:	40021400 	.word	0x40021400

0800291c <_ZN7tinyfsm7FsmListIJEE17set_initial_stateEv>:

  template<typename... FF>
  struct FsmList;

  template<> struct FsmList<> {
    static void set_initial_state() { }
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
 8002920:	bf00      	nop
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <_ZN7tinyfsm7FsmListIJEE5enterEv>:
    static void reset() { }
    static void enter() { }
 800292a:	b480      	push	{r7}
 800292c:	af00      	add	r7, sp, #0
 800292e:	bf00      	nop
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <_ZN4FSM15reactERKN7tinyfsm5EventE>:
    void react(tinyfsm::Event const &) {};
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <_ZN4FSM25reactERKN7tinyfsm5EventE>:
    void react(tinyfsm::Event const &) {};
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
 8002956:	6039      	str	r1, [r7, #0]
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <_ZN4FSM35reactERKN7tinyfsm5EventE>:
    void react(tinyfsm::Event const &) {};
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
	...

0800297c <_Z16start_fsm_driverv>:

TIMER_3_EVENT TIMER_3_EVENT_SINGLETON = TIMER_3_EVENT();
TIMER_1_EVENT TIMER_1_EVENT_SINGLETON = TIMER_1_EVENT();
TIMER_2_EVENT TIMER_2_EVENT_SINGLETON = TIMER_2_EVENT();

void start_fsm_driver() {
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
    FSM_Event event;

    my_fsm::start();
 8002982:	f000 f827 	bl	80029d4 <_ZN7tinyfsm7FsmListIJ4FSM14FSM24FSM3EE5startEv>

    while (1) {
        if (read_event(&event)) {
 8002986:	1dfb      	adds	r3, r7, #7
 8002988:	4618      	mov	r0, r3
 800298a:	f000 f9fd 	bl	8002d88 <_Z10read_eventP9FSM_Event>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	bf14      	ite	ne
 8002994:	2301      	movne	r3, #1
 8002996:	2300      	moveq	r3, #0
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d0f3      	beq.n	8002986 <_Z16start_fsm_driverv+0xa>
            switch (event) {
 800299e:	79fb      	ldrb	r3, [r7, #7]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d007      	beq.n	80029b4 <_Z16start_fsm_driverv+0x38>
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d009      	beq.n	80029bc <_Z16start_fsm_driverv+0x40>
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d10b      	bne.n	80029c4 <_Z16start_fsm_driverv+0x48>
            case TIMER_3_EVENT_INDEX: my_fsm::dispatch(TIMER_3_EVENT_SINGLETON);break;
 80029ac:	4806      	ldr	r0, [pc, #24]	; (80029c8 <_Z16start_fsm_driverv+0x4c>)
 80029ae:	f000 f819 	bl	80029e4 <_ZN7tinyfsm7FsmListIJ4FSM14FSM24FSM3EE8dispatchI13TIMER_3_EVENTEEvRKT_>
 80029b2:	e007      	b.n	80029c4 <_Z16start_fsm_driverv+0x48>
            case TIMER_1_EVENT_INDEX: my_fsm::dispatch(TIMER_1_EVENT_SINGLETON);break;
 80029b4:	4805      	ldr	r0, [pc, #20]	; (80029cc <_Z16start_fsm_driverv+0x50>)
 80029b6:	f000 f823 	bl	8002a00 <_ZN7tinyfsm7FsmListIJ4FSM14FSM24FSM3EE8dispatchI13TIMER_1_EVENTEEvRKT_>
 80029ba:	e003      	b.n	80029c4 <_Z16start_fsm_driverv+0x48>
            case TIMER_2_EVENT_INDEX: my_fsm::dispatch(TIMER_2_EVENT_SINGLETON);break;
 80029bc:	4804      	ldr	r0, [pc, #16]	; (80029d0 <_Z16start_fsm_driverv+0x54>)
 80029be:	f000 f82d 	bl	8002a1c <_ZN7tinyfsm7FsmListIJ4FSM14FSM24FSM3EE8dispatchI13TIMER_2_EVENTEEvRKT_>
 80029c2:	bf00      	nop
        if (read_event(&event)) {
 80029c4:	e7df      	b.n	8002986 <_Z16start_fsm_driverv+0xa>
 80029c6:	bf00      	nop
 80029c8:	2000004c 	.word	0x2000004c
 80029cc:	20000050 	.word	0x20000050
 80029d0:	20000054 	.word	0x20000054

080029d4 <_ZN7tinyfsm7FsmListIJ4FSM14FSM24FSM3EE5startEv>:
    static void enter() {
      fsmtype::enter();
      FsmList<FF...>::enter();
    }

    static void start() {
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
      set_initial_state();
 80029d8:	f000 f82e 	bl	8002a38 <_ZN7tinyfsm7FsmListIJ4FSM14FSM24FSM3EE17set_initial_stateEv>
      enter();
 80029dc:	f000 f834 	bl	8002a48 <_ZN7tinyfsm7FsmListIJ4FSM14FSM24FSM3EE5enterEv>
    }
 80029e0:	bf00      	nop
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <_ZN7tinyfsm7FsmListIJ4FSM14FSM24FSM3EE8dispatchI13TIMER_3_EVENTEEvRKT_>:

    template<typename E>
    static void dispatch(E const & event) {
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
      fsmtype::template dispatch<E>(event);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 f833 	bl	8002a58 <_ZN7tinyfsm3FsmI4FSM1E8dispatchI13TIMER_3_EVENTEEvRKT_>
      FsmList<FF...>::template dispatch<E>(event);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f840 	bl	8002a78 <_ZN7tinyfsm7FsmListIJ4FSM24FSM3EE8dispatchI13TIMER_3_EVENTEEvRKT_>
    }
 80029f8:	bf00      	nop
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <_ZN7tinyfsm7FsmListIJ4FSM14FSM24FSM3EE8dispatchI13TIMER_1_EVENTEEvRKT_>:
    static void dispatch(E const & event) {
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
      fsmtype::template dispatch<E>(event);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 f843 	bl	8002a94 <_ZN7tinyfsm3FsmI4FSM1E8dispatchI13TIMER_1_EVENTEEvRKT_>
      FsmList<FF...>::template dispatch<E>(event);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 f854 	bl	8002abc <_ZN7tinyfsm7FsmListIJ4FSM24FSM3EE8dispatchI13TIMER_1_EVENTEEvRKT_>
    }
 8002a14:	bf00      	nop
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <_ZN7tinyfsm7FsmListIJ4FSM14FSM24FSM3EE8dispatchI13TIMER_2_EVENTEEvRKT_>:
    static void dispatch(E const & event) {
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
      fsmtype::template dispatch<E>(event);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 f857 	bl	8002ad8 <_ZN7tinyfsm3FsmI4FSM1E8dispatchI13TIMER_2_EVENTEEvRKT_>
      FsmList<FF...>::template dispatch<E>(event);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f864 	bl	8002af8 <_ZN7tinyfsm7FsmListIJ4FSM24FSM3EE8dispatchI13TIMER_2_EVENTEEvRKT_>
    }
 8002a30:	bf00      	nop
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <_ZN7tinyfsm7FsmListIJ4FSM14FSM24FSM3EE17set_initial_stateEv>:
    static void set_initial_state() {
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
      fsmtype::set_initial_state();
 8002a3c:	f7ff fc20 	bl	8002280 <_ZN7tinyfsm3FsmI4FSM1E17set_initial_stateEv>
      FsmList<FF...>::set_initial_state();
 8002a40:	f000 f868 	bl	8002b14 <_ZN7tinyfsm7FsmListIJ4FSM24FSM3EE17set_initial_stateEv>
    }
 8002a44:	bf00      	nop
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <_ZN7tinyfsm7FsmListIJ4FSM14FSM24FSM3EE5enterEv>:
    static void enter() {
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
      fsmtype::enter();
 8002a4c:	f000 f86a 	bl	8002b24 <_ZN7tinyfsm3FsmI4FSM1E5enterEv>
      FsmList<FF...>::enter();
 8002a50:	f000 f876 	bl	8002b40 <_ZN7tinyfsm7FsmListIJ4FSM24FSM3EE5enterEv>
    }
 8002a54:	bf00      	nop
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <_ZN7tinyfsm3FsmI4FSM1E8dispatchI13TIMER_3_EVENTEEvRKT_>:
    static void dispatch(E const & event) {
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
      current_state_ptr->react(event);
 8002a60:	4b04      	ldr	r3, [pc, #16]	; (8002a74 <_ZN7tinyfsm3FsmI4FSM1E8dispatchI13TIMER_3_EVENTEEvRKT_+0x1c>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6879      	ldr	r1, [r7, #4]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff ff66 	bl	8002938 <_ZN4FSM15reactERKN7tinyfsm5EventE>
    }
 8002a6c:	bf00      	nop
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	20000040 	.word	0x20000040

08002a78 <_ZN7tinyfsm7FsmListIJ4FSM24FSM3EE8dispatchI13TIMER_3_EVENTEEvRKT_>:
    static void dispatch(E const & event) {
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
      fsmtype::template dispatch<E>(event);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 f865 	bl	8002b50 <_ZN7tinyfsm3FsmI4FSM2E8dispatchI13TIMER_3_EVENTEEvRKT_>
      FsmList<FF...>::template dispatch<E>(event);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f872 	bl	8002b70 <_ZN7tinyfsm7FsmListIJ4FSM3EE8dispatchI13TIMER_3_EVENTEEvRKT_>
    }
 8002a8c:	bf00      	nop
 8002a8e:	3708      	adds	r7, #8
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <_ZN7tinyfsm3FsmI4FSM1E8dispatchI13TIMER_1_EVENTEEvRKT_>:
    static void dispatch(E const & event) {
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
      current_state_ptr->react(event);
 8002a9c:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <_ZN7tinyfsm3FsmI4FSM1E8dispatchI13TIMER_1_EVENTEEvRKT_+0x24>)
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	4b05      	ldr	r3, [pc, #20]	; (8002ab8 <_ZN7tinyfsm3FsmI4FSM1E8dispatchI13TIMER_1_EVENTEEvRKT_+0x24>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	3308      	adds	r3, #8
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	4610      	mov	r0, r2
 8002aae:	4798      	blx	r3
    }
 8002ab0:	bf00      	nop
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	20000040 	.word	0x20000040

08002abc <_ZN7tinyfsm7FsmListIJ4FSM24FSM3EE8dispatchI13TIMER_1_EVENTEEvRKT_>:
    static void dispatch(E const & event) {
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
      fsmtype::template dispatch<E>(event);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 f861 	bl	8002b8c <_ZN7tinyfsm3FsmI4FSM2E8dispatchI13TIMER_1_EVENTEEvRKT_>
      FsmList<FF...>::template dispatch<E>(event);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f86e 	bl	8002bac <_ZN7tinyfsm7FsmListIJ4FSM3EE8dispatchI13TIMER_1_EVENTEEvRKT_>
    }
 8002ad0:	bf00      	nop
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <_ZN7tinyfsm3FsmI4FSM1E8dispatchI13TIMER_2_EVENTEEvRKT_>:
    static void dispatch(E const & event) {
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
      current_state_ptr->react(event);
 8002ae0:	4b04      	ldr	r3, [pc, #16]	; (8002af4 <_ZN7tinyfsm3FsmI4FSM1E8dispatchI13TIMER_2_EVENTEEvRKT_+0x1c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff ff26 	bl	8002938 <_ZN4FSM15reactERKN7tinyfsm5EventE>
    }
 8002aec:	bf00      	nop
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	20000040 	.word	0x20000040

08002af8 <_ZN7tinyfsm7FsmListIJ4FSM24FSM3EE8dispatchI13TIMER_2_EVENTEEvRKT_>:
    static void dispatch(E const & event) {
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
      fsmtype::template dispatch<E>(event);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 f861 	bl	8002bc8 <_ZN7tinyfsm3FsmI4FSM2E8dispatchI13TIMER_2_EVENTEEvRKT_>
      FsmList<FF...>::template dispatch<E>(event);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f872 	bl	8002bf0 <_ZN7tinyfsm7FsmListIJ4FSM3EE8dispatchI13TIMER_2_EVENTEEvRKT_>
    }
 8002b0c:	bf00      	nop
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <_ZN7tinyfsm7FsmListIJ4FSM24FSM3EE17set_initial_stateEv>:
    static void set_initial_state() {
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
      fsmtype::set_initial_state();
 8002b18:	f7ff fc46 	bl	80023a8 <_ZN7tinyfsm3FsmI4FSM2E17set_initial_stateEv>
      FsmList<FF...>::set_initial_state();
 8002b1c:	f000 f876 	bl	8002c0c <_ZN7tinyfsm7FsmListIJ4FSM3EE17set_initial_stateEv>
    }
 8002b20:	bf00      	nop
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <_ZN7tinyfsm3FsmI4FSM1E5enterEv>:
    static void enter() {
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
      current_state_ptr->entry();
 8002b28:	4b04      	ldr	r3, [pc, #16]	; (8002b3c <_ZN7tinyfsm3FsmI4FSM1E5enterEv+0x18>)
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	4b03      	ldr	r3, [pc, #12]	; (8002b3c <_ZN7tinyfsm3FsmI4FSM1E5enterEv+0x18>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4610      	mov	r0, r2
 8002b36:	4798      	blx	r3
    }
 8002b38:	bf00      	nop
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	20000040 	.word	0x20000040

08002b40 <_ZN7tinyfsm7FsmListIJ4FSM24FSM3EE5enterEv>:
    static void enter() {
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
      fsmtype::enter();
 8002b44:	f000 f86a 	bl	8002c1c <_ZN7tinyfsm3FsmI4FSM2E5enterEv>
      FsmList<FF...>::enter();
 8002b48:	f000 f876 	bl	8002c38 <_ZN7tinyfsm7FsmListIJ4FSM3EE5enterEv>
    }
 8002b4c:	bf00      	nop
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <_ZN7tinyfsm3FsmI4FSM2E8dispatchI13TIMER_3_EVENTEEvRKT_>:
    static void dispatch(E const & event) {
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
      current_state_ptr->react(event);
 8002b58:	4b04      	ldr	r3, [pc, #16]	; (8002b6c <_ZN7tinyfsm3FsmI4FSM2E8dispatchI13TIMER_3_EVENTEEvRKT_+0x1c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6879      	ldr	r1, [r7, #4]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff fef5 	bl	800294e <_ZN4FSM25reactERKN7tinyfsm5EventE>
    }
 8002b64:	bf00      	nop
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	20000044 	.word	0x20000044

08002b70 <_ZN7tinyfsm7FsmListIJ4FSM3EE8dispatchI13TIMER_3_EVENTEEvRKT_>:
    static void dispatch(E const & event) {
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
      fsmtype::template dispatch<E>(event);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 f865 	bl	8002c48 <_ZN7tinyfsm3FsmI4FSM3E8dispatchI13TIMER_3_EVENTEEvRKT_>
      FsmList<FF...>::template dispatch<E>(event);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f876 	bl	8002c70 <_ZN7tinyfsm7FsmListIJEE8dispatchI13TIMER_3_EVENTEEvRKT_>
    }
 8002b84:	bf00      	nop
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <_ZN7tinyfsm3FsmI4FSM2E8dispatchI13TIMER_1_EVENTEEvRKT_>:
    static void dispatch(E const & event) {
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
      current_state_ptr->react(event);
 8002b94:	4b04      	ldr	r3, [pc, #16]	; (8002ba8 <_ZN7tinyfsm3FsmI4FSM2E8dispatchI13TIMER_1_EVENTEEvRKT_+0x1c>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7ff fed7 	bl	800294e <_ZN4FSM25reactERKN7tinyfsm5EventE>
    }
 8002ba0:	bf00      	nop
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	20000044 	.word	0x20000044

08002bac <_ZN7tinyfsm7FsmListIJ4FSM3EE8dispatchI13TIMER_1_EVENTEEvRKT_>:
    static void dispatch(E const & event) {
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
      fsmtype::template dispatch<E>(event);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 f865 	bl	8002c84 <_ZN7tinyfsm3FsmI4FSM3E8dispatchI13TIMER_1_EVENTEEvRKT_>
      FsmList<FF...>::template dispatch<E>(event);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f872 	bl	8002ca4 <_ZN7tinyfsm7FsmListIJEE8dispatchI13TIMER_1_EVENTEEvRKT_>
    }
 8002bc0:	bf00      	nop
 8002bc2:	3708      	adds	r7, #8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <_ZN7tinyfsm3FsmI4FSM2E8dispatchI13TIMER_2_EVENTEEvRKT_>:
    static void dispatch(E const & event) {
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
      current_state_ptr->react(event);
 8002bd0:	4b06      	ldr	r3, [pc, #24]	; (8002bec <_ZN7tinyfsm3FsmI4FSM2E8dispatchI13TIMER_2_EVENTEEvRKT_+0x24>)
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	4b05      	ldr	r3, [pc, #20]	; (8002bec <_ZN7tinyfsm3FsmI4FSM2E8dispatchI13TIMER_2_EVENTEEvRKT_+0x24>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	3308      	adds	r3, #8
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	4610      	mov	r0, r2
 8002be2:	4798      	blx	r3
    }
 8002be4:	bf00      	nop
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	20000044 	.word	0x20000044

08002bf0 <_ZN7tinyfsm7FsmListIJ4FSM3EE8dispatchI13TIMER_2_EVENTEEvRKT_>:
    static void dispatch(E const & event) {
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
      fsmtype::template dispatch<E>(event);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f85d 	bl	8002cb8 <_ZN7tinyfsm3FsmI4FSM3E8dispatchI13TIMER_2_EVENTEEvRKT_>
      FsmList<FF...>::template dispatch<E>(event);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 f86a 	bl	8002cd8 <_ZN7tinyfsm7FsmListIJEE8dispatchI13TIMER_2_EVENTEEvRKT_>
    }
 8002c04:	bf00      	nop
 8002c06:	3708      	adds	r7, #8
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <_ZN7tinyfsm7FsmListIJ4FSM3EE17set_initial_stateEv>:
    static void set_initial_state() {
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
      fsmtype::set_initial_state();
 8002c10:	f7ff fc5c 	bl	80024cc <_ZN7tinyfsm3FsmI4FSM3E17set_initial_stateEv>
      FsmList<FF...>::set_initial_state();
 8002c14:	f7ff fe82 	bl	800291c <_ZN7tinyfsm7FsmListIJEE17set_initial_stateEv>
    }
 8002c18:	bf00      	nop
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <_ZN7tinyfsm3FsmI4FSM2E5enterEv>:
    static void enter() {
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
      current_state_ptr->entry();
 8002c20:	4b04      	ldr	r3, [pc, #16]	; (8002c34 <_ZN7tinyfsm3FsmI4FSM2E5enterEv+0x18>)
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	4b03      	ldr	r3, [pc, #12]	; (8002c34 <_ZN7tinyfsm3FsmI4FSM2E5enterEv+0x18>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4610      	mov	r0, r2
 8002c2e:	4798      	blx	r3
    }
 8002c30:	bf00      	nop
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	20000044 	.word	0x20000044

08002c38 <_ZN7tinyfsm7FsmListIJ4FSM3EE5enterEv>:
    static void enter() {
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
      fsmtype::enter();
 8002c3c:	f000 f856 	bl	8002cec <_ZN7tinyfsm3FsmI4FSM3E5enterEv>
      FsmList<FF...>::enter();
 8002c40:	f7ff fe73 	bl	800292a <_ZN7tinyfsm7FsmListIJEE5enterEv>
    }
 8002c44:	bf00      	nop
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <_ZN7tinyfsm3FsmI4FSM3E8dispatchI13TIMER_3_EVENTEEvRKT_>:
    static void dispatch(E const & event) {
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
      current_state_ptr->react(event);
 8002c50:	4b06      	ldr	r3, [pc, #24]	; (8002c6c <_ZN7tinyfsm3FsmI4FSM3E8dispatchI13TIMER_3_EVENTEEvRKT_+0x24>)
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	4b05      	ldr	r3, [pc, #20]	; (8002c6c <_ZN7tinyfsm3FsmI4FSM3E8dispatchI13TIMER_3_EVENTEEvRKT_+0x24>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	3308      	adds	r3, #8
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	4610      	mov	r0, r2
 8002c62:	4798      	blx	r3
    }
 8002c64:	bf00      	nop
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	20000048 	.word	0x20000048

08002c70 <_ZN7tinyfsm7FsmListIJEE8dispatchI13TIMER_3_EVENTEEvRKT_>:
    static void dispatch(E const &) { }
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <_ZN7tinyfsm3FsmI4FSM3E8dispatchI13TIMER_1_EVENTEEvRKT_>:
    static void dispatch(E const & event) {
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
      current_state_ptr->react(event);
 8002c8c:	4b04      	ldr	r3, [pc, #16]	; (8002ca0 <_ZN7tinyfsm3FsmI4FSM3E8dispatchI13TIMER_1_EVENTEEvRKT_+0x1c>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7ff fe66 	bl	8002964 <_ZN4FSM35reactERKN7tinyfsm5EventE>
    }
 8002c98:	bf00      	nop
 8002c9a:	3708      	adds	r7, #8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	20000048 	.word	0x20000048

08002ca4 <_ZN7tinyfsm7FsmListIJEE8dispatchI13TIMER_1_EVENTEEvRKT_>:
    static void dispatch(E const &) { }
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <_ZN7tinyfsm3FsmI4FSM3E8dispatchI13TIMER_2_EVENTEEvRKT_>:
    static void dispatch(E const & event) {
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
      current_state_ptr->react(event);
 8002cc0:	4b04      	ldr	r3, [pc, #16]	; (8002cd4 <_ZN7tinyfsm3FsmI4FSM3E8dispatchI13TIMER_2_EVENTEEvRKT_+0x1c>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff fe4c 	bl	8002964 <_ZN4FSM35reactERKN7tinyfsm5EventE>
    }
 8002ccc:	bf00      	nop
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	20000048 	.word	0x20000048

08002cd8 <_ZN7tinyfsm7FsmListIJEE8dispatchI13TIMER_2_EVENTEEvRKT_>:
    static void dispatch(E const &) { }
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <_ZN7tinyfsm3FsmI4FSM3E5enterEv>:
    static void enter() {
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
      current_state_ptr->entry();
 8002cf0:	4b04      	ldr	r3, [pc, #16]	; (8002d04 <_ZN7tinyfsm3FsmI4FSM3E5enterEv+0x18>)
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	4b03      	ldr	r3, [pc, #12]	; (8002d04 <_ZN7tinyfsm3FsmI4FSM3E5enterEv+0x18>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4610      	mov	r0, r2
 8002cfe:	4798      	blx	r3
    }
 8002d00:	bf00      	nop
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	20000048 	.word	0x20000048

08002d08 <_ZN10Event_FIFOC1Ev>:

typedef struct {
    int head = 0;
    int tail = 0;
    FSM_Event buffer[FIFO_SIZE];
} Event_FIFO;
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	605a      	str	r2, [r3, #4]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
	...

08002d2c <_Z11write_event9FSM_Event>:
 *   FSM_Event event -> event to be stored in the fifo
 *
 * Returns:
 *   void
 */
void write_event(FSM_Event event) {
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	71fb      	strb	r3, [r7, #7]
	int next = fifo.tail + 1;
 8002d36:	4b13      	ldr	r3, [pc, #76]	; (8002d84 <_Z11write_event9FSM_Event+0x58>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	60fb      	str	r3, [r7, #12]

	if ((next == fifo.head) || ((next == FIFO_SIZE) && (fifo.head == 0))) {
 8002d3e:	4b11      	ldr	r3, [pc, #68]	; (8002d84 <_Z11write_event9FSM_Event+0x58>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d016      	beq.n	8002d76 <_Z11write_event9FSM_Event+0x4a>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2b64      	cmp	r3, #100	; 0x64
 8002d4c:	d103      	bne.n	8002d56 <_Z11write_event9FSM_Event+0x2a>
 8002d4e:	4b0d      	ldr	r3, [pc, #52]	; (8002d84 <_Z11write_event9FSM_Event+0x58>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00f      	beq.n	8002d76 <_Z11write_event9FSM_Event+0x4a>
		/* Buffer is full! */
	} else {
		/* Write event to end of buffer */
		fifo.buffer[fifo.tail] = event;
 8002d56:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <_Z11write_event9FSM_Event+0x58>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	4a0a      	ldr	r2, [pc, #40]	; (8002d84 <_Z11write_event9FSM_Event+0x58>)
 8002d5c:	4413      	add	r3, r2
 8002d5e:	79fa      	ldrb	r2, [r7, #7]
 8002d60:	721a      	strb	r2, [r3, #8]
		fifo.tail = (fifo.tail == (FIFO_SIZE - 1)) ? 0 : next;
 8002d62:	4b08      	ldr	r3, [pc, #32]	; (8002d84 <_Z11write_event9FSM_Event+0x58>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2b63      	cmp	r3, #99	; 0x63
 8002d68:	d001      	beq.n	8002d6e <_Z11write_event9FSM_Event+0x42>
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	e000      	b.n	8002d70 <_Z11write_event9FSM_Event+0x44>
 8002d6e:	2300      	movs	r3, #0
 8002d70:	4a04      	ldr	r2, [pc, #16]	; (8002d84 <_Z11write_event9FSM_Event+0x58>)
 8002d72:	6053      	str	r3, [r2, #4]
	}
}
 8002d74:	e7ff      	b.n	8002d76 <_Z11write_event9FSM_Event+0x4a>
 8002d76:	bf00      	nop
 8002d78:	3714      	adds	r7, #20
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	20000058 	.word	0x20000058

08002d88 <_Z10read_eventP9FSM_Event>:
 *
 * Returns:
 *   0 -> nothing to read, event should be ignored
 *   1 -> success, event updated
 */
int read_event(FSM_Event *event) {
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
	if (fifo.head == fifo.tail) {
 8002d90:	4b10      	ldr	r3, [pc, #64]	; (8002dd4 <_Z10read_eventP9FSM_Event+0x4c>)
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	4b0f      	ldr	r3, [pc, #60]	; (8002dd4 <_Z10read_eventP9FSM_Event+0x4c>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d101      	bne.n	8002da0 <_Z10read_eventP9FSM_Event+0x18>
		/* Buffer is empty! */
		return 0;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	e012      	b.n	8002dc6 <_Z10read_eventP9FSM_Event+0x3e>
	} else {
		*event = fifo.buffer[fifo.head];
 8002da0:	4b0c      	ldr	r3, [pc, #48]	; (8002dd4 <_Z10read_eventP9FSM_Event+0x4c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a0b      	ldr	r2, [pc, #44]	; (8002dd4 <_Z10read_eventP9FSM_Event+0x4c>)
 8002da6:	4413      	add	r3, r2
 8002da8:	7a1a      	ldrb	r2, [r3, #8]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	701a      	strb	r2, [r3, #0]
		fifo.head = (fifo.head == (FIFO_SIZE - 1)) ? 0 : fifo.head + 1;
 8002dae:	4b09      	ldr	r3, [pc, #36]	; (8002dd4 <_Z10read_eventP9FSM_Event+0x4c>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2b63      	cmp	r3, #99	; 0x63
 8002db4:	d003      	beq.n	8002dbe <_Z10read_eventP9FSM_Event+0x36>
 8002db6:	4b07      	ldr	r3, [pc, #28]	; (8002dd4 <_Z10read_eventP9FSM_Event+0x4c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	3301      	adds	r3, #1
 8002dbc:	e000      	b.n	8002dc0 <_Z10read_eventP9FSM_Event+0x38>
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	4a04      	ldr	r2, [pc, #16]	; (8002dd4 <_Z10read_eventP9FSM_Event+0x4c>)
 8002dc2:	6013      	str	r3, [r2, #0]
		return 1;
 8002dc4:	2301      	movs	r3, #1
	}
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	20000058 	.word	0x20000058

08002dd8 <_Z41__static_initialization_and_destruction_0ii>:
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d107      	bne.n	8002df8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d102      	bne.n	8002df8 <_Z41__static_initialization_and_destruction_0ii+0x20>
Event_FIFO fifo;
 8002df2:	4803      	ldr	r0, [pc, #12]	; (8002e00 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8002df4:	f7ff ff88 	bl	8002d08 <_ZN10Event_FIFOC1Ev>
}
 8002df8:	bf00      	nop
 8002dfa:	3708      	adds	r7, #8
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	20000058 	.word	0x20000058

08002e04 <_GLOBAL__sub_I_fifo>:
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002e0c:	2001      	movs	r0, #1
 8002e0e:	f7ff ffe3 	bl	8002dd8 <_Z41__static_initialization_and_destruction_0ii>
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b08a      	sub	sp, #40	; 0x28
 8002e18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e1a:	f107 0314 	add.w	r3, r7, #20
 8002e1e:	2200      	movs	r2, #0
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	605a      	str	r2, [r3, #4]
 8002e24:	609a      	str	r2, [r3, #8]
 8002e26:	60da      	str	r2, [r3, #12]
 8002e28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e2a:	4b2a      	ldr	r3, [pc, #168]	; (8002ed4 <MX_GPIO_Init+0xc0>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	4a29      	ldr	r2, [pc, #164]	; (8002ed4 <MX_GPIO_Init+0xc0>)
 8002e30:	f043 0320 	orr.w	r3, r3, #32
 8002e34:	6313      	str	r3, [r2, #48]	; 0x30
 8002e36:	4b27      	ldr	r3, [pc, #156]	; (8002ed4 <MX_GPIO_Init+0xc0>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	f003 0320 	and.w	r3, r3, #32
 8002e3e:	613b      	str	r3, [r7, #16]
 8002e40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e42:	4b24      	ldr	r3, [pc, #144]	; (8002ed4 <MX_GPIO_Init+0xc0>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e46:	4a23      	ldr	r2, [pc, #140]	; (8002ed4 <MX_GPIO_Init+0xc0>)
 8002e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4e:	4b21      	ldr	r3, [pc, #132]	; (8002ed4 <MX_GPIO_Init+0xc0>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e5a:	4b1e      	ldr	r3, [pc, #120]	; (8002ed4 <MX_GPIO_Init+0xc0>)
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5e:	4a1d      	ldr	r2, [pc, #116]	; (8002ed4 <MX_GPIO_Init+0xc0>)
 8002e60:	f043 0304 	orr.w	r3, r3, #4
 8002e64:	6313      	str	r3, [r2, #48]	; 0x30
 8002e66:	4b1b      	ldr	r3, [pc, #108]	; (8002ed4 <MX_GPIO_Init+0xc0>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	f003 0304 	and.w	r3, r3, #4
 8002e6e:	60bb      	str	r3, [r7, #8]
 8002e70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e72:	4b18      	ldr	r3, [pc, #96]	; (8002ed4 <MX_GPIO_Init+0xc0>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	4a17      	ldr	r2, [pc, #92]	; (8002ed4 <MX_GPIO_Init+0xc0>)
 8002e78:	f043 0301 	orr.w	r3, r3, #1
 8002e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e7e:	4b15      	ldr	r3, [pc, #84]	; (8002ed4 <MX_GPIO_Init+0xc0>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	607b      	str	r3, [r7, #4]
 8002e88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e8a:	4b12      	ldr	r3, [pc, #72]	; (8002ed4 <MX_GPIO_Init+0xc0>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	4a11      	ldr	r2, [pc, #68]	; (8002ed4 <MX_GPIO_Init+0xc0>)
 8002e90:	f043 0302 	orr.w	r3, r3, #2
 8002e94:	6313      	str	r3, [r2, #48]	; 0x30
 8002e96:	4b0f      	ldr	r3, [pc, #60]	; (8002ed4 <MX_GPIO_Init+0xc0>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	603b      	str	r3, [r7, #0]
 8002ea0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f244 0181 	movw	r1, #16513	; 0x4081
 8002ea8:	480b      	ldr	r0, [pc, #44]	; (8002ed8 <MX_GPIO_Init+0xc4>)
 8002eaa:	f7fe f8d1 	bl	8001050 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 8002eae:	f244 0381 	movw	r3, #16513	; 0x4081
 8002eb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ec0:	f107 0314 	add.w	r3, r7, #20
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4804      	ldr	r0, [pc, #16]	; (8002ed8 <MX_GPIO_Init+0xc4>)
 8002ec8:	f7fd ff18 	bl	8000cfc <HAL_GPIO_Init>

}
 8002ecc:	bf00      	nop
 8002ece:	3728      	adds	r7, #40	; 0x28
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40023800 	.word	0x40023800
 8002ed8:	40020400 	.word	0x40020400

08002edc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ee0:	f7fd fb2a 	bl	8000538 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ee4:	f000 f812 	bl	8002f0c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ee8:	f7ff ff94 	bl	8002e14 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002eec:	f7ff fb3c 	bl	8002568 <MX_ADC1_Init>
  MX_ADC2_Init();
 8002ef0:	f7ff fb8c 	bl	800260c <MX_ADC2_Init>
  MX_ADC3_Init();
 8002ef4:	f7ff fbdc 	bl	80026b0 <MX_ADC3_Init>
  MX_TIM1_Init();
 8002ef8:	f000 f932 	bl	8003160 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002efc:	f000 f984 	bl	8003208 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002f00:	f000 f9d0 	bl	80032a4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  start_fsm_driver();
 8002f04:	f7ff fd3a 	bl	800297c <_Z16start_fsm_driverv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002f08:	e7fe      	b.n	8002f08 <main+0x2c>
	...

08002f0c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b094      	sub	sp, #80	; 0x50
 8002f10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f12:	f107 031c 	add.w	r3, r7, #28
 8002f16:	2234      	movs	r2, #52	; 0x34
 8002f18:	2100      	movs	r1, #0
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 fc00 	bl	8003720 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f20:	f107 0308 	add.w	r3, r7, #8
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	605a      	str	r2, [r3, #4]
 8002f2a:	609a      	str	r2, [r3, #8]
 8002f2c:	60da      	str	r2, [r3, #12]
 8002f2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f30:	4b32      	ldr	r3, [pc, #200]	; (8002ffc <_Z18SystemClock_Configv+0xf0>)
 8002f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f34:	4a31      	ldr	r2, [pc, #196]	; (8002ffc <_Z18SystemClock_Configv+0xf0>)
 8002f36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f3a:	6413      	str	r3, [r2, #64]	; 0x40
 8002f3c:	4b2f      	ldr	r3, [pc, #188]	; (8002ffc <_Z18SystemClock_Configv+0xf0>)
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f44:	607b      	str	r3, [r7, #4]
 8002f46:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f48:	4b2d      	ldr	r3, [pc, #180]	; (8003000 <_Z18SystemClock_Configv+0xf4>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a2c      	ldr	r2, [pc, #176]	; (8003000 <_Z18SystemClock_Configv+0xf4>)
 8002f4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f52:	6013      	str	r3, [r2, #0]
 8002f54:	4b2a      	ldr	r3, [pc, #168]	; (8003000 <_Z18SystemClock_Configv+0xf4>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f5c:	603b      	str	r3, [r7, #0]
 8002f5e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f60:	2302      	movs	r3, #2
 8002f62:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f64:	2301      	movs	r3, #1
 8002f66:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f68:	2310      	movs	r3, #16
 8002f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002f70:	2300      	movs	r3, #0
 8002f72:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002f74:	2308      	movs	r3, #8
 8002f76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002f78:	23c0      	movs	r3, #192	; 0xc0
 8002f7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8002f80:	2308      	movs	r3, #8
 8002f82:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f84:	f107 031c 	add.w	r3, r7, #28
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7fe f8cb 	bl	8001124 <HAL_RCC_OscConfig>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	bf14      	ite	ne
 8002f94:	2301      	movne	r3, #1
 8002f96:	2300      	moveq	r3, #0
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 8002f9e:	f000 f831 	bl	8003004 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002fa2:	f7fe f86f 	bl	8001084 <HAL_PWREx_EnableOverDrive>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	bf14      	ite	ne
 8002fac:	2301      	movne	r3, #1
 8002fae:	2300      	moveq	r3, #0
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <_Z18SystemClock_Configv+0xae>
  {
    Error_Handler();
 8002fb6:	f000 f825 	bl	8003004 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fba:	230f      	movs	r3, #15
 8002fbc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002fc6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002fca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002fcc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002fd0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8002fd2:	f107 0308 	add.w	r3, r7, #8
 8002fd6:	2106      	movs	r1, #6
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7fe fb15 	bl	8001608 <HAL_RCC_ClockConfig>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	bf14      	ite	ne
 8002fe4:	2301      	movne	r3, #1
 8002fe6:	2300      	moveq	r3, #0
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <_Z18SystemClock_Configv+0xe6>
  {
    Error_Handler();
 8002fee:	f000 f809 	bl	8003004 <Error_Handler>
  }
}
 8002ff2:	bf00      	nop
 8002ff4:	3750      	adds	r7, #80	; 0x50
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40023800 	.word	0x40023800
 8003000:	40007000 	.word	0x40007000

08003004 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003008:	bf00      	nop
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
	...

08003014 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800301a:	4b0f      	ldr	r3, [pc, #60]	; (8003058 <HAL_MspInit+0x44>)
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	4a0e      	ldr	r2, [pc, #56]	; (8003058 <HAL_MspInit+0x44>)
 8003020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003024:	6413      	str	r3, [r2, #64]	; 0x40
 8003026:	4b0c      	ldr	r3, [pc, #48]	; (8003058 <HAL_MspInit+0x44>)
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800302e:	607b      	str	r3, [r7, #4]
 8003030:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003032:	4b09      	ldr	r3, [pc, #36]	; (8003058 <HAL_MspInit+0x44>)
 8003034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003036:	4a08      	ldr	r2, [pc, #32]	; (8003058 <HAL_MspInit+0x44>)
 8003038:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800303c:	6453      	str	r3, [r2, #68]	; 0x44
 800303e:	4b06      	ldr	r3, [pc, #24]	; (8003058 <HAL_MspInit+0x44>)
 8003040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003046:	603b      	str	r3, [r7, #0]
 8003048:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	40023800 	.word	0x40023800

0800305c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003060:	bf00      	nop
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800306a:	b480      	push	{r7}
 800306c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800306e:	e7fe      	b.n	800306e <HardFault_Handler+0x4>

08003070 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003074:	e7fe      	b.n	8003074 <MemManage_Handler+0x4>

08003076 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003076:	b480      	push	{r7}
 8003078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800307a:	e7fe      	b.n	800307a <BusFault_Handler+0x4>

0800307c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003080:	e7fe      	b.n	8003080 <UsageFault_Handler+0x4>

08003082 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003082:	b480      	push	{r7}
 8003084:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003086:	bf00      	nop
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003094:	bf00      	nop
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr

0800309e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800309e:	b480      	push	{r7}
 80030a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030a2:	bf00      	nop
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030b0:	f7fd fa80 	bl	80005b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030b4:	bf00      	nop
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80030bc:	4802      	ldr	r0, [pc, #8]	; (80030c8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80030be:	f7fe fce4 	bl	8001a8a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80030c2:	bf00      	nop
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	200001e0 	.word	0x200001e0

080030cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80030d0:	4802      	ldr	r0, [pc, #8]	; (80030dc <TIM2_IRQHandler+0x10>)
 80030d2:	f7fe fcda 	bl	8001a8a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80030d6:	bf00      	nop
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	20000220 	.word	0x20000220

080030e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80030e4:	4802      	ldr	r0, [pc, #8]	; (80030f0 <TIM3_IRQHandler+0x10>)
 80030e6:	f7fe fcd0 	bl	8001a8a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80030ea:	bf00      	nop
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	200001a0 	.word	0x200001a0

080030f4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030f8:	4b15      	ldr	r3, [pc, #84]	; (8003150 <SystemInit+0x5c>)
 80030fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fe:	4a14      	ldr	r2, [pc, #80]	; (8003150 <SystemInit+0x5c>)
 8003100:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003104:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003108:	4b12      	ldr	r3, [pc, #72]	; (8003154 <SystemInit+0x60>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a11      	ldr	r2, [pc, #68]	; (8003154 <SystemInit+0x60>)
 800310e:	f043 0301 	orr.w	r3, r3, #1
 8003112:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003114:	4b0f      	ldr	r3, [pc, #60]	; (8003154 <SystemInit+0x60>)
 8003116:	2200      	movs	r2, #0
 8003118:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800311a:	4b0e      	ldr	r3, [pc, #56]	; (8003154 <SystemInit+0x60>)
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	490d      	ldr	r1, [pc, #52]	; (8003154 <SystemInit+0x60>)
 8003120:	4b0d      	ldr	r3, [pc, #52]	; (8003158 <SystemInit+0x64>)
 8003122:	4013      	ands	r3, r2
 8003124:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003126:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <SystemInit+0x60>)
 8003128:	4a0c      	ldr	r2, [pc, #48]	; (800315c <SystemInit+0x68>)
 800312a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800312c:	4b09      	ldr	r3, [pc, #36]	; (8003154 <SystemInit+0x60>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a08      	ldr	r2, [pc, #32]	; (8003154 <SystemInit+0x60>)
 8003132:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003136:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003138:	4b06      	ldr	r3, [pc, #24]	; (8003154 <SystemInit+0x60>)
 800313a:	2200      	movs	r2, #0
 800313c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800313e:	4b04      	ldr	r3, [pc, #16]	; (8003150 <SystemInit+0x5c>)
 8003140:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003144:	609a      	str	r2, [r3, #8]
#endif
}
 8003146:	bf00      	nop
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr
 8003150:	e000ed00 	.word	0xe000ed00
 8003154:	40023800 	.word	0x40023800
 8003158:	fef6ffff 	.word	0xfef6ffff
 800315c:	24003010 	.word	0x24003010

08003160 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b088      	sub	sp, #32
 8003164:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003166:	f107 0310 	add.w	r3, r7, #16
 800316a:	2200      	movs	r2, #0
 800316c:	601a      	str	r2, [r3, #0]
 800316e:	605a      	str	r2, [r3, #4]
 8003170:	609a      	str	r2, [r3, #8]
 8003172:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003174:	1d3b      	adds	r3, r7, #4
 8003176:	2200      	movs	r2, #0
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	605a      	str	r2, [r3, #4]
 800317c:	609a      	str	r2, [r3, #8]

  htim1.Instance = TIM1;
 800317e:	4b20      	ldr	r3, [pc, #128]	; (8003200 <MX_TIM1_Init+0xa0>)
 8003180:	4a20      	ldr	r2, [pc, #128]	; (8003204 <MX_TIM1_Init+0xa4>)
 8003182:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9599;
 8003184:	4b1e      	ldr	r3, [pc, #120]	; (8003200 <MX_TIM1_Init+0xa0>)
 8003186:	f242 527f 	movw	r2, #9599	; 0x257f
 800318a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800318c:	4b1c      	ldr	r3, [pc, #112]	; (8003200 <MX_TIM1_Init+0xa0>)
 800318e:	2200      	movs	r2, #0
 8003190:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8003192:	4b1b      	ldr	r3, [pc, #108]	; (8003200 <MX_TIM1_Init+0xa0>)
 8003194:	2200      	movs	r2, #0
 8003196:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003198:	4b19      	ldr	r3, [pc, #100]	; (8003200 <MX_TIM1_Init+0xa0>)
 800319a:	2200      	movs	r2, #0
 800319c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800319e:	4b18      	ldr	r3, [pc, #96]	; (8003200 <MX_TIM1_Init+0xa0>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031a4:	4b16      	ldr	r3, [pc, #88]	; (8003200 <MX_TIM1_Init+0xa0>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80031aa:	4815      	ldr	r0, [pc, #84]	; (8003200 <MX_TIM1_Init+0xa0>)
 80031ac:	f7fe fbec 	bl	8001988 <HAL_TIM_Base_Init>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80031b6:	f7ff ff25 	bl	8003004 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80031c0:	f107 0310 	add.w	r3, r7, #16
 80031c4:	4619      	mov	r1, r3
 80031c6:	480e      	ldr	r0, [pc, #56]	; (8003200 <MX_TIM1_Init+0xa0>)
 80031c8:	f7fe fd7e 	bl	8001cc8 <HAL_TIM_ConfigClockSource>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80031d2:	f7ff ff17 	bl	8003004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031d6:	2300      	movs	r3, #0
 80031d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80031da:	2300      	movs	r3, #0
 80031dc:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031de:	2300      	movs	r3, #0
 80031e0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80031e2:	1d3b      	adds	r3, r7, #4
 80031e4:	4619      	mov	r1, r3
 80031e6:	4806      	ldr	r0, [pc, #24]	; (8003200 <MX_TIM1_Init+0xa0>)
 80031e8:	f7fe ff8a 	bl	8002100 <HAL_TIMEx_MasterConfigSynchronization>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80031f2:	f7ff ff07 	bl	8003004 <Error_Handler>
  }

}
 80031f6:	bf00      	nop
 80031f8:	3720      	adds	r7, #32
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	200001e0 	.word	0x200001e0
 8003204:	40010000 	.word	0x40010000

08003208 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b088      	sub	sp, #32
 800320c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800320e:	f107 0310 	add.w	r3, r7, #16
 8003212:	2200      	movs	r2, #0
 8003214:	601a      	str	r2, [r3, #0]
 8003216:	605a      	str	r2, [r3, #4]
 8003218:	609a      	str	r2, [r3, #8]
 800321a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800321c:	1d3b      	adds	r3, r7, #4
 800321e:	2200      	movs	r2, #0
 8003220:	601a      	str	r2, [r3, #0]
 8003222:	605a      	str	r2, [r3, #4]
 8003224:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8003226:	4b1e      	ldr	r3, [pc, #120]	; (80032a0 <MX_TIM2_Init+0x98>)
 8003228:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800322c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9600;
 800322e:	4b1c      	ldr	r3, [pc, #112]	; (80032a0 <MX_TIM2_Init+0x98>)
 8003230:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003234:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003236:	4b1a      	ldr	r3, [pc, #104]	; (80032a0 <MX_TIM2_Init+0x98>)
 8003238:	2200      	movs	r2, #0
 800323a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 800323c:	4b18      	ldr	r3, [pc, #96]	; (80032a0 <MX_TIM2_Init+0x98>)
 800323e:	2200      	movs	r2, #0
 8003240:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003242:	4b17      	ldr	r3, [pc, #92]	; (80032a0 <MX_TIM2_Init+0x98>)
 8003244:	2200      	movs	r2, #0
 8003246:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003248:	4b15      	ldr	r3, [pc, #84]	; (80032a0 <MX_TIM2_Init+0x98>)
 800324a:	2200      	movs	r2, #0
 800324c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800324e:	4814      	ldr	r0, [pc, #80]	; (80032a0 <MX_TIM2_Init+0x98>)
 8003250:	f7fe fb9a 	bl	8001988 <HAL_TIM_Base_Init>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800325a:	f7ff fed3 	bl	8003004 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800325e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003262:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003264:	f107 0310 	add.w	r3, r7, #16
 8003268:	4619      	mov	r1, r3
 800326a:	480d      	ldr	r0, [pc, #52]	; (80032a0 <MX_TIM2_Init+0x98>)
 800326c:	f7fe fd2c 	bl	8001cc8 <HAL_TIM_ConfigClockSource>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003276:	f7ff fec5 	bl	8003004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800327a:	2300      	movs	r3, #0
 800327c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800327e:	2300      	movs	r3, #0
 8003280:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003282:	1d3b      	adds	r3, r7, #4
 8003284:	4619      	mov	r1, r3
 8003286:	4806      	ldr	r0, [pc, #24]	; (80032a0 <MX_TIM2_Init+0x98>)
 8003288:	f7fe ff3a 	bl	8002100 <HAL_TIMEx_MasterConfigSynchronization>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003292:	f7ff feb7 	bl	8003004 <Error_Handler>
  }

}
 8003296:	bf00      	nop
 8003298:	3720      	adds	r7, #32
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	20000220 	.word	0x20000220

080032a4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b088      	sub	sp, #32
 80032a8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032aa:	f107 0310 	add.w	r3, r7, #16
 80032ae:	2200      	movs	r2, #0
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	605a      	str	r2, [r3, #4]
 80032b4:	609a      	str	r2, [r3, #8]
 80032b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032b8:	1d3b      	adds	r3, r7, #4
 80032ba:	2200      	movs	r2, #0
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	605a      	str	r2, [r3, #4]
 80032c0:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 80032c2:	4b1d      	ldr	r3, [pc, #116]	; (8003338 <MX_TIM3_Init+0x94>)
 80032c4:	4a1d      	ldr	r2, [pc, #116]	; (800333c <MX_TIM3_Init+0x98>)
 80032c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9599;
 80032c8:	4b1b      	ldr	r3, [pc, #108]	; (8003338 <MX_TIM3_Init+0x94>)
 80032ca:	f242 527f 	movw	r2, #9599	; 0x257f
 80032ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032d0:	4b19      	ldr	r3, [pc, #100]	; (8003338 <MX_TIM3_Init+0x94>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 80032d6:	4b18      	ldr	r3, [pc, #96]	; (8003338 <MX_TIM3_Init+0x94>)
 80032d8:	2200      	movs	r2, #0
 80032da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032dc:	4b16      	ldr	r3, [pc, #88]	; (8003338 <MX_TIM3_Init+0x94>)
 80032de:	2200      	movs	r2, #0
 80032e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032e2:	4b15      	ldr	r3, [pc, #84]	; (8003338 <MX_TIM3_Init+0x94>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80032e8:	4813      	ldr	r0, [pc, #76]	; (8003338 <MX_TIM3_Init+0x94>)
 80032ea:	f7fe fb4d 	bl	8001988 <HAL_TIM_Base_Init>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80032f4:	f7ff fe86 	bl	8003004 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80032fe:	f107 0310 	add.w	r3, r7, #16
 8003302:	4619      	mov	r1, r3
 8003304:	480c      	ldr	r0, [pc, #48]	; (8003338 <MX_TIM3_Init+0x94>)
 8003306:	f7fe fcdf 	bl	8001cc8 <HAL_TIM_ConfigClockSource>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003310:	f7ff fe78 	bl	8003004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003314:	2300      	movs	r3, #0
 8003316:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003318:	2300      	movs	r3, #0
 800331a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800331c:	1d3b      	adds	r3, r7, #4
 800331e:	4619      	mov	r1, r3
 8003320:	4805      	ldr	r0, [pc, #20]	; (8003338 <MX_TIM3_Init+0x94>)
 8003322:	f7fe feed 	bl	8002100 <HAL_TIMEx_MasterConfigSynchronization>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800332c:	f7ff fe6a 	bl	8003004 <Error_Handler>
  }

}
 8003330:	bf00      	nop
 8003332:	3720      	adds	r7, #32
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	200001a0 	.word	0x200001a0
 800333c:	40000400 	.word	0x40000400

08003340 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a27      	ldr	r2, [pc, #156]	; (80033ec <HAL_TIM_Base_MspInit+0xac>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d114      	bne.n	800337c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003352:	4b27      	ldr	r3, [pc, #156]	; (80033f0 <HAL_TIM_Base_MspInit+0xb0>)
 8003354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003356:	4a26      	ldr	r2, [pc, #152]	; (80033f0 <HAL_TIM_Base_MspInit+0xb0>)
 8003358:	f043 0301 	orr.w	r3, r3, #1
 800335c:	6453      	str	r3, [r2, #68]	; 0x44
 800335e:	4b24      	ldr	r3, [pc, #144]	; (80033f0 <HAL_TIM_Base_MspInit+0xb0>)
 8003360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	617b      	str	r3, [r7, #20]
 8003368:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800336a:	2200      	movs	r2, #0
 800336c:	2100      	movs	r1, #0
 800336e:	2019      	movs	r0, #25
 8003370:	f7fd fc8d 	bl	8000c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003374:	2019      	movs	r0, #25
 8003376:	f7fd fca6 	bl	8000cc6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800337a:	e032      	b.n	80033e2 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM2)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003384:	d114      	bne.n	80033b0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003386:	4b1a      	ldr	r3, [pc, #104]	; (80033f0 <HAL_TIM_Base_MspInit+0xb0>)
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	4a19      	ldr	r2, [pc, #100]	; (80033f0 <HAL_TIM_Base_MspInit+0xb0>)
 800338c:	f043 0301 	orr.w	r3, r3, #1
 8003390:	6413      	str	r3, [r2, #64]	; 0x40
 8003392:	4b17      	ldr	r3, [pc, #92]	; (80033f0 <HAL_TIM_Base_MspInit+0xb0>)
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	613b      	str	r3, [r7, #16]
 800339c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800339e:	2200      	movs	r2, #0
 80033a0:	2100      	movs	r1, #0
 80033a2:	201c      	movs	r0, #28
 80033a4:	f7fd fc73 	bl	8000c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80033a8:	201c      	movs	r0, #28
 80033aa:	f7fd fc8c 	bl	8000cc6 <HAL_NVIC_EnableIRQ>
}
 80033ae:	e018      	b.n	80033e2 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM3)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a0f      	ldr	r2, [pc, #60]	; (80033f4 <HAL_TIM_Base_MspInit+0xb4>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d113      	bne.n	80033e2 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80033ba:	4b0d      	ldr	r3, [pc, #52]	; (80033f0 <HAL_TIM_Base_MspInit+0xb0>)
 80033bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033be:	4a0c      	ldr	r2, [pc, #48]	; (80033f0 <HAL_TIM_Base_MspInit+0xb0>)
 80033c0:	f043 0302 	orr.w	r3, r3, #2
 80033c4:	6413      	str	r3, [r2, #64]	; 0x40
 80033c6:	4b0a      	ldr	r3, [pc, #40]	; (80033f0 <HAL_TIM_Base_MspInit+0xb0>)
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	60fb      	str	r3, [r7, #12]
 80033d0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80033d2:	2200      	movs	r2, #0
 80033d4:	2100      	movs	r1, #0
 80033d6:	201d      	movs	r0, #29
 80033d8:	f7fd fc59 	bl	8000c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80033dc:	201d      	movs	r0, #29
 80033de:	f7fd fc72 	bl	8000cc6 <HAL_NVIC_EnableIRQ>
}
 80033e2:	bf00      	nop
 80033e4:	3718      	adds	r7, #24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	40010000 	.word	0x40010000
 80033f0:	40023800 	.word	0x40023800
 80033f4:	40000400 	.word	0x40000400

080033f8 <_Z9state_S01v>:
#include "user_states.hpp"

void state_S01(void) {
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80033fc:	2200      	movs	r2, #0
 80033fe:	2180      	movs	r1, #128	; 0x80
 8003400:	4802      	ldr	r0, [pc, #8]	; (800340c <_Z9state_S01v+0x14>)
 8003402:	f7fd fe25 	bl	8001050 <HAL_GPIO_WritePin>
}
 8003406:	bf00      	nop
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	40020400 	.word	0x40020400

08003410 <_Z9state_S02v>:

void state_S02(void) {
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8003414:	2201      	movs	r2, #1
 8003416:	2180      	movs	r1, #128	; 0x80
 8003418:	4802      	ldr	r0, [pc, #8]	; (8003424 <_Z9state_S02v+0x14>)
 800341a:	f7fd fe19 	bl	8001050 <HAL_GPIO_WritePin>
}
 800341e:	bf00      	nop
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40020400 	.word	0x40020400

08003428 <_Z9state_S03v>:

void state_S03(void) {
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800342c:	2200      	movs	r2, #0
 800342e:	2101      	movs	r1, #1
 8003430:	4802      	ldr	r0, [pc, #8]	; (800343c <_Z9state_S03v+0x14>)
 8003432:	f7fd fe0d 	bl	8001050 <HAL_GPIO_WritePin>
}
 8003436:	bf00      	nop
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40020400 	.word	0x40020400

08003440 <_Z9state_S04v>:

void state_S04(void) {
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8003444:	2201      	movs	r2, #1
 8003446:	2101      	movs	r1, #1
 8003448:	4802      	ldr	r0, [pc, #8]	; (8003454 <_Z9state_S04v+0x14>)
 800344a:	f7fd fe01 	bl	8001050 <HAL_GPIO_WritePin>
}
 800344e:	bf00      	nop
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	40020400 	.word	0x40020400

08003458 <_Z9state_S05v>:

void state_S05(void) {
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800345c:	2200      	movs	r2, #0
 800345e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003462:	4802      	ldr	r0, [pc, #8]	; (800346c <_Z9state_S05v+0x14>)
 8003464:	f7fd fdf4 	bl	8001050 <HAL_GPIO_WritePin>
}
 8003468:	bf00      	nop
 800346a:	bd80      	pop	{r7, pc}
 800346c:	40020400 	.word	0x40020400

08003470 <_Z9state_S06v>:

void state_S06(void) {
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8003474:	2201      	movs	r2, #1
 8003476:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800347a:	4802      	ldr	r0, [pc, #8]	; (8003484 <_Z9state_S06v+0x14>)
 800347c:	f7fd fde8 	bl	8001050 <HAL_GPIO_WritePin>
}
 8003480:	bf00      	nop
 8003482:	bd80      	pop	{r7, pc}
 8003484:	40020400 	.word	0x40020400

08003488 <_Z11start_timer5Timeri>:

extern TIM_HandleTypeDef htim1;
extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim3;

void start_timer(Timer timer, int ms) {
 8003488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800348a:	b091      	sub	sp, #68	; 0x44
 800348c:	af0e      	add	r7, sp, #56	; 0x38
 800348e:	4603      	mov	r3, r0
 8003490:	6039      	str	r1, [r7, #0]
 8003492:	71fb      	strb	r3, [r7, #7]
	switch (timer) {
 8003494:	79fb      	ldrb	r3, [r7, #7]
 8003496:	2b03      	cmp	r3, #3
 8003498:	d843      	bhi.n	8003522 <_Z11start_timer5Timeri+0x9a>
 800349a:	a201      	add	r2, pc, #4	; (adr r2, 80034a0 <_Z11start_timer5Timeri+0x18>)
 800349c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a0:	080034fd 	.word	0x080034fd
 80034a4:	080034b1 	.word	0x080034b1
 80034a8:	080034d7 	.word	0x080034d7
 80034ac:	08003523 	.word	0x08003523
	case TIMER_1: start_hal_timer(htim1, ms);return;
 80034b0:	4e1d      	ldr	r6, [pc, #116]	; (8003528 <_Z11start_timer5Timeri+0xa0>)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	930c      	str	r3, [sp, #48]	; 0x30
 80034b6:	466d      	mov	r5, sp
 80034b8:	f106 0410 	add.w	r4, r6, #16
 80034bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034c4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80034c8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80034cc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80034d0:	f000 f830 	bl	8003534 <_ZL15start_hal_timer17TIM_HandleTypeDefi>
 80034d4:	e025      	b.n	8003522 <_Z11start_timer5Timeri+0x9a>
	case TIMER_2: start_hal_timer(htim2, ms);return;
 80034d6:	4e15      	ldr	r6, [pc, #84]	; (800352c <_Z11start_timer5Timeri+0xa4>)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	930c      	str	r3, [sp, #48]	; 0x30
 80034dc:	466d      	mov	r5, sp
 80034de:	f106 0410 	add.w	r4, r6, #16
 80034e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034ea:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80034ee:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80034f2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80034f6:	f000 f81d 	bl	8003534 <_ZL15start_hal_timer17TIM_HandleTypeDefi>
 80034fa:	e012      	b.n	8003522 <_Z11start_timer5Timeri+0x9a>
	case TIMER_3: start_hal_timer(htim3, ms);return;
 80034fc:	4e0c      	ldr	r6, [pc, #48]	; (8003530 <_Z11start_timer5Timeri+0xa8>)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	930c      	str	r3, [sp, #48]	; 0x30
 8003502:	466d      	mov	r5, sp
 8003504:	f106 0410 	add.w	r4, r6, #16
 8003508:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800350a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800350c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800350e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003510:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003514:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003518:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800351c:	f000 f80a 	bl	8003534 <_ZL15start_hal_timer17TIM_HandleTypeDefi>
 8003520:	bf00      	nop
	case NUM_TIMERS: return;
	}
}
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003528:	200001e0 	.word	0x200001e0
 800352c:	20000220 	.word	0x20000220
 8003530:	200001a0 	.word	0x200001a0

08003534 <_ZL15start_hal_timer17TIM_HandleTypeDefi>:

static void start_hal_timer(TIM_HandleTypeDef htim, int ms) {
 8003534:	b084      	sub	sp, #16
 8003536:	b580      	push	{r7, lr}
 8003538:	af00      	add	r7, sp, #0
 800353a:	f107 0c08 	add.w	ip, r7, #8
 800353e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	htim.Init.Period = 10*ms;
 8003542:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003544:	4613      	mov	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	4413      	add	r3, r2
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	617b      	str	r3, [r7, #20]
	HAL_TIM_Base_Init(&htim);
 800354e:	f107 0008 	add.w	r0, r7, #8
 8003552:	f7fe fa19 	bl	8001988 <HAL_TIM_Base_Init>
	__HAL_TIM_CLEAR_IT(&htim, TIM_IT_UPDATE);
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	f06f 0201 	mvn.w	r2, #1
 800355c:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim);
 800355e:	f107 0008 	add.w	r0, r7, #8
 8003562:	f7fe fa3d 	bl	80019e0 <HAL_TIM_Base_Start_IT>
}
 8003566:	bf00      	nop
 8003568:	46bd      	mov	sp, r7
 800356a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800356e:	b004      	add	sp, #16
 8003570:	4770      	bx	lr
	...

08003574 <_Z10stop_timer5Timer>:

void stop_timer(Timer timer) {
 8003574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003576:	b08f      	sub	sp, #60	; 0x3c
 8003578:	af0c      	add	r7, sp, #48	; 0x30
 800357a:	4603      	mov	r3, r0
 800357c:	71fb      	strb	r3, [r7, #7]
	switch (timer) {
 800357e:	79fb      	ldrb	r3, [r7, #7]
 8003580:	2b03      	cmp	r3, #3
 8003582:	d83e      	bhi.n	8003602 <_Z10stop_timer5Timer+0x8e>
 8003584:	a201      	add	r2, pc, #4	; (adr r2, 800358c <_Z10stop_timer5Timer+0x18>)
 8003586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800358a:	bf00      	nop
 800358c:	080035e1 	.word	0x080035e1
 8003590:	0800359d 	.word	0x0800359d
 8003594:	080035bf 	.word	0x080035bf
 8003598:	08003603 	.word	0x08003603
	case TIMER_1: stop_hal_timer(htim1);return;
 800359c:	4e1a      	ldr	r6, [pc, #104]	; (8003608 <_Z10stop_timer5Timer+0x94>)
 800359e:	466d      	mov	r5, sp
 80035a0:	f106 0410 	add.w	r4, r6, #16
 80035a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035ac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80035b0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80035b4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80035b8:	f000 f82c 	bl	8003614 <_ZL14stop_hal_timer17TIM_HandleTypeDef>
 80035bc:	e021      	b.n	8003602 <_Z10stop_timer5Timer+0x8e>
	case TIMER_2: stop_hal_timer(htim2);return;
 80035be:	4e13      	ldr	r6, [pc, #76]	; (800360c <_Z10stop_timer5Timer+0x98>)
 80035c0:	466d      	mov	r5, sp
 80035c2:	f106 0410 	add.w	r4, r6, #16
 80035c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035ce:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80035d2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80035d6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80035da:	f000 f81b 	bl	8003614 <_ZL14stop_hal_timer17TIM_HandleTypeDef>
 80035de:	e010      	b.n	8003602 <_Z10stop_timer5Timer+0x8e>
	case TIMER_3: stop_hal_timer(htim3);return;
 80035e0:	4e0b      	ldr	r6, [pc, #44]	; (8003610 <_Z10stop_timer5Timer+0x9c>)
 80035e2:	466d      	mov	r5, sp
 80035e4:	f106 0410 	add.w	r4, r6, #16
 80035e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035f0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80035f4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80035f8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80035fc:	f000 f80a 	bl	8003614 <_ZL14stop_hal_timer17TIM_HandleTypeDef>
 8003600:	bf00      	nop
	case NUM_TIMERS: return;
	}
}
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003608:	200001e0 	.word	0x200001e0
 800360c:	20000220 	.word	0x20000220
 8003610:	200001a0 	.word	0x200001a0

08003614 <_ZL14stop_hal_timer17TIM_HandleTypeDef>:

static void stop_hal_timer(TIM_HandleTypeDef htim) {
 8003614:	b084      	sub	sp, #16
 8003616:	b580      	push	{r7, lr}
 8003618:	af00      	add	r7, sp, #0
 800361a:	f107 0c08 	add.w	ip, r7, #8
 800361e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_TIM_Base_Stop_IT(&htim);
 8003622:	f107 0008 	add.w	r0, r7, #8
 8003626:	f7fe fa05 	bl	8001a34 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SET_COUNTER(&htim, 0);
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	2200      	movs	r2, #0
 800362e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003630:	bf00      	nop
 8003632:	46bd      	mov	sp, r7
 8003634:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003638:	b004      	add	sp, #16
 800363a:	4770      	bx	lr

0800363c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
	switch ((uint32_t)htim->Instance) {
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a0c      	ldr	r2, [pc, #48]	; (800367c <HAL_TIM_PeriodElapsedCallback+0x40>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d00e      	beq.n	800366c <HAL_TIM_PeriodElapsedCallback+0x30>
 800364e:	4a0c      	ldr	r2, [pc, #48]	; (8003680 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d003      	beq.n	800365c <HAL_TIM_PeriodElapsedCallback+0x20>
 8003654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003658:	d004      	beq.n	8003664 <HAL_TIM_PeriodElapsedCallback+0x28>
 800365a:	e00b      	b.n	8003674 <HAL_TIM_PeriodElapsedCallback+0x38>
	case (uint32_t)TIM1_BASE: write_event(TIMER_1_EVENT_INDEX);return;
 800365c:	2001      	movs	r0, #1
 800365e:	f7ff fb65 	bl	8002d2c <_Z11write_event9FSM_Event>
 8003662:	e007      	b.n	8003674 <HAL_TIM_PeriodElapsedCallback+0x38>
	case (uint32_t)TIM2_BASE: write_event(TIMER_2_EVENT_INDEX);return;
 8003664:	2002      	movs	r0, #2
 8003666:	f7ff fb61 	bl	8002d2c <_Z11write_event9FSM_Event>
 800366a:	e003      	b.n	8003674 <HAL_TIM_PeriodElapsedCallback+0x38>
	case (uint32_t)TIM3_BASE: write_event(TIMER_3_EVENT_INDEX);return;
 800366c:	2000      	movs	r0, #0
 800366e:	f7ff fb5d 	bl	8002d2c <_Z11write_event9FSM_Event>
 8003672:	bf00      	nop
	}
}
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	40000400 	.word	0x40000400
 8003680:	40010000 	.word	0x40010000

08003684 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003684:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036bc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003688:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800368a:	e003      	b.n	8003694 <LoopCopyDataInit>

0800368c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800368c:	4b0c      	ldr	r3, [pc, #48]	; (80036c0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800368e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003690:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003692:	3104      	adds	r1, #4

08003694 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003694:	480b      	ldr	r0, [pc, #44]	; (80036c4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003696:	4b0c      	ldr	r3, [pc, #48]	; (80036c8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003698:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800369a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800369c:	d3f6      	bcc.n	800368c <CopyDataInit>
  ldr  r2, =_sbss
 800369e:	4a0b      	ldr	r2, [pc, #44]	; (80036cc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80036a0:	e002      	b.n	80036a8 <LoopFillZerobss>

080036a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80036a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80036a4:	f842 3b04 	str.w	r3, [r2], #4

080036a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80036a8:	4b09      	ldr	r3, [pc, #36]	; (80036d0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80036aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80036ac:	d3f9      	bcc.n	80036a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80036ae:	f7ff fd21 	bl	80030f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036b2:	f000 f811 	bl	80036d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036b6:	f7ff fc11 	bl	8002edc <main>
  bx  lr    
 80036ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80036bc:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80036c0:	080037e4 	.word	0x080037e4
  ldr  r0, =_sdata
 80036c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80036c8:	20000024 	.word	0x20000024
  ldr  r2, =_sbss
 80036cc:	20000024 	.word	0x20000024
  ldr  r3, = _ebss
 80036d0:	20000260 	.word	0x20000260

080036d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036d4:	e7fe      	b.n	80036d4 <ADC_IRQHandler>
	...

080036d8 <__libc_init_array>:
 80036d8:	b570      	push	{r4, r5, r6, lr}
 80036da:	4e0d      	ldr	r6, [pc, #52]	; (8003710 <__libc_init_array+0x38>)
 80036dc:	4c0d      	ldr	r4, [pc, #52]	; (8003714 <__libc_init_array+0x3c>)
 80036de:	1ba4      	subs	r4, r4, r6
 80036e0:	10a4      	asrs	r4, r4, #2
 80036e2:	2500      	movs	r5, #0
 80036e4:	42a5      	cmp	r5, r4
 80036e6:	d109      	bne.n	80036fc <__libc_init_array+0x24>
 80036e8:	4e0b      	ldr	r6, [pc, #44]	; (8003718 <__libc_init_array+0x40>)
 80036ea:	4c0c      	ldr	r4, [pc, #48]	; (800371c <__libc_init_array+0x44>)
 80036ec:	f000 f820 	bl	8003730 <_init>
 80036f0:	1ba4      	subs	r4, r4, r6
 80036f2:	10a4      	asrs	r4, r4, #2
 80036f4:	2500      	movs	r5, #0
 80036f6:	42a5      	cmp	r5, r4
 80036f8:	d105      	bne.n	8003706 <__libc_init_array+0x2e>
 80036fa:	bd70      	pop	{r4, r5, r6, pc}
 80036fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003700:	4798      	blx	r3
 8003702:	3501      	adds	r5, #1
 8003704:	e7ee      	b.n	80036e4 <__libc_init_array+0xc>
 8003706:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800370a:	4798      	blx	r3
 800370c:	3501      	adds	r5, #1
 800370e:	e7f2      	b.n	80036f6 <__libc_init_array+0x1e>
 8003710:	080037d8 	.word	0x080037d8
 8003714:	080037d8 	.word	0x080037d8
 8003718:	080037d8 	.word	0x080037d8
 800371c:	080037e0 	.word	0x080037e0

08003720 <memset>:
 8003720:	4402      	add	r2, r0
 8003722:	4603      	mov	r3, r0
 8003724:	4293      	cmp	r3, r2
 8003726:	d100      	bne.n	800372a <memset+0xa>
 8003728:	4770      	bx	lr
 800372a:	f803 1b01 	strb.w	r1, [r3], #1
 800372e:	e7f9      	b.n	8003724 <memset+0x4>

08003730 <_init>:
 8003730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003732:	bf00      	nop
 8003734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003736:	bc08      	pop	{r3}
 8003738:	469e      	mov	lr, r3
 800373a:	4770      	bx	lr

0800373c <_fini>:
 800373c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800373e:	bf00      	nop
 8003740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003742:	bc08      	pop	{r3}
 8003744:	469e      	mov	lr, r3
 8003746:	4770      	bx	lr
